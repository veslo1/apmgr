<?php
/**
 * Test class for Applicant_ApplyController.
 * Generated by PHPUnit on 2010-05-29 at 14:13:33.
 */
class Applicant_ApplyControllerTest extends ControllerTestCase {

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  public function setUp()
  {
    parent::setup();
    $this->dataSetStackBuffer = array('users'=>1,'accountsAndLinks'=>1,'depositsAndFees'=>1,'applicantApply'=>0);
    $this->loadDataSets();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  public function tearDown()
  {
    $this->unLoadDataSets();
    parent::tearDown();
  }

  public function testIndexWithAccountWillRedirect()
  {
    //	applicant/apply/index/modelId/2/unit/2/apartment/1
    $this->login('applicant','Test1234');
    $this->request->setMethod('POST')
      	 ->setPost( array('haveaccount' => 1) );
    $this->dispatch('applicant/apply/index/model/1/unit/1/apartment/1');
    $this->assertRedirect("We expect a redirect");
    $this->assertTrue($this->getResponse()->isRedirect());
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/applicant/apply/applyuser',$redirectedTo[0]['value']);
  }
  

  public function testIndexActionWillNotDisplayFormWhenErrorOccurs()
  {
    $this->dispatch('applicant/apply/index/modelId/2/unit/2/apartment/1');
    $this->assertXpathCount('//input[@type=\'radio\']', 0);
    $this->dispatch('applicant/apply/index/unit/1/apartment/1');
    $this->assertQueryContentContains('p','The unit model type is not present',$this->getResponse()->getBody());
  }

  public function testIndexWithOutAccountWillRedirect()
  {
    //	applicant/apply/index/modelId/2/unit/2/apartment/1
    $this->login('applicant','Test1234');
    $this->request->setMethod('POST')
      ->setPost( array('haveaccount' => 0) );
    $this->dispatch('applicant/apply/index/model/1/unit/1/apartment/1');
    $this->assertRedirect();
    $this->assertTrue($this->getResponse()->isRedirect());
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/user/join/index',$redirectedTo[0]['value']);
  }

  public function testApplicantSpouseInfoWillDisplayFormWithSession()
  {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $workflowHelper->setSessionSteps('model', 1);
    $workflowHelper->setSessionSteps('unit', 1);
    $this->resetRequest()
      ->resetResponse();
    $this->dispatch('applicant/apply/spouse');
    $workflowHelper->terminateSession();
    $this->assertQueryCount('form', 1);
    $this->assertXpath("//input[@id='fullName']","Full name for the spouse is missing");
  }

  public function testApplicantRejectsContract()
  {
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $this->assertEquals("applicantApply", $workflowHelper->getSessionNameSpace());
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $workflowHelper->setSessionSteps('unit', 1);
    $workflowHelper->setSessionSteps('steps',$workflowHelper->getSteps());
    $this->resetRequest()
      ->resetResponse();
    $this->login('applicant','Test1234');
    $this->request->setMethod('POST')
      ->setPost(
          array(
            'applicantSignature' => 'foo',
            'acceptedContract' => 0
            )
          );
    $this->dispatch('applicant/apply/authorization');
    $this->assertRedirect('We are not being redirected');
    $this->assertTrue($this->getResponse()->isRedirect());
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/applicant/apply/removeinfo',$redirectedTo[0]['value']);
    $workflowHelper->terminateSession();
  }

  public function testApplicantGoesToRejectInfo()
  {
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $this->assertEquals("applicantApply", $workflowHelper->getSessionNameSpace());
    $workflowHelper->initSession();
    $this->resetRequest()->resetResponse();
    $this->login('applicant','Test1234');
    $this->dispatch('applicant/apply/removeinfo');
    $this->assertQueryCount('form', 1,'We have more than 1 form in the page');
    $this->assertXpath("//input[@id='deleteInfo-0']","The yes option is missing");
    $this->assertXpath("//input[@id='deleteInfo-1']","The no option is missing");
    $workflowHelper->terminateSession();
  }

  public function testApplicantGoesToRejectInfoAndSaysNoGoesBackToStepFourteen()
  {
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $this->assertEquals("applicantApply", $workflowHelper->getSessionNameSpace());
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $this->resetRequest()
      ->resetResponse();
    $this->login('applicant','Test1234');
    $this->request->setMethod('POST')
      ->setPost(
          array('deleteInfo' => 0)
          );
    $this->dispatch('applicant/apply/removeinfo');
    $this->assertTrue($this->getResponse()->isRedirect());
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/applicant/apply/authorization',$redirectedTo[0]['value']);
    $workflowHelper->terminateSession();
  }

  public function testApplicantGoesToRejectInfoAndSaysYesAndInfoDestroyed()
  {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $this->resetRequest()->resetResponse();
    $this->request->setMethod('POST')->setPost(array('deleteInfo' => 1));
    $this->dispatch('applicant/apply/removeinfo');
    //		var_dump($this->getResponse()->getBody());
    $this->assertTrue($this->getResponse()->isRedirect());
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/user/login/logout',$redirectedTo[0]['value']);
    $workflowHelper->terminateSession();
  }

  public function testEndActionShowsApplicantDashboardLink()
  {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $this->dispatch('applicant/apply/end');
    //DO NOT REMOVE THE SPACING PLEASE, IT BREAKS THE ASSERT. IF THAT HAPPENS, COPY&PASTE THE OUTPUT FOR THE h1 THAT YOU WILL SEE IN THE MESSAGE
    $response = $this->getResponse()->getBody();
    $this->assertTrue(preg_match('/Thank you for applying/',$response)==1,"Should contain thanks message");
    $this->assertTrue(preg_match('/Click here to view your/',$response)==1,"Should contain link to view your dashboard");
    $workflowHelper->terminateSession();
  }

  public function testAboutYouActionDisplaysForm() {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $workflowHelper->setSessionSteps('model', 1);
    $workflowHelper->setSessionSteps('unit', 1);
    $workflowHelper->setSessionNameSpace('apartment',1);
    $this->dispatch('applicant/apply/aboutyou');
    $this->assertQueryCount('form', 1,'In this page we should only see one form');
    $workflowHelper->terminateSession();
  }

  public function testAboutYouActionValidatesEmptyPost() {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $workflowHelper->setSessionSteps('model', 1);
    $workflowHelper->setSessionSteps('unit', 1);
    $workflowHelper->setSessionNameSpace('apartment',1);
    $postArgs = array();
    $this->request->setMethod('POST')->setPost($postArgs);
    $this->dispatch('applicant/apply/aboutyou');
    $this->assertQueryContentContains('li', "Value is required and can't be empty",'We should have validation errors');
    $workflowHelper->terminateSession();
  }

  public function testAboutYouActionPasses()
  {
    $this->login('applicant','Test1234');
    $workflowHelper = new Applicant_Library_WorkflowHelper();
    $workflowHelper->setSessionNameSpace("applicantApply");
    $workflowHelper->initSession();
    $workflowHelper->setSessionSteps('applicantId', 1);
    $workflowHelper->setSessionSteps('model', 1);
    $workflowHelper->setSessionSteps('unit', 1);
    $workflowHelper->setSessionNameSpace('apartment',1);
    $workflowHelper->setSessionSteps('steps', $workflowHelper->getSteps());
    $postArgs = array(
    	'fullName'=>'John Connor','identification'=>'123456789',
        'state'=>43,'dob'=>'1985-04-22','ssn'=>'123456789','height'=>1.78,
        'weight'=>88,'sex'=>1,'maritalStatus'=>1,
        'usCitizen'=>1,'smoke'=>1,'havePets'=>2,'eyeColor'=>'brown',
        'hairColor'=>'Brunette',
    	'phone'=>'123456789'
        );
    $this->request->setMethod('POST')->setPost($postArgs);
    $this->dispatch('applicant/apply/aboutyou');
    $this->assertTrue($this->getResponse()->isRedirect(),"We expected a redirect");
    $redirectedTo = $this->getResponse()->getHeaders();
    $this->assertEquals('apmgr.com/applicant/apply/currentaddress',$redirectedTo[0]['value']);
    //		$this->assertQueryContentContains('li', "Value is required and can't be empty",'We should have validation errors');
    $workflowHelper->terminateSession();
  }
  
}
?>
