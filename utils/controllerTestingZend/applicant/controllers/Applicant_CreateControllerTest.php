<?php
/**
 * Test class for Applicant_CreateController.
 * Generated by PHPUnit on 2010-08-07 at 11:12:50.
 */
class Applicant_CreateControllerTest extends ControllerTestCase
{
	/**
	 * @var Applicant_CreateController
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1,'accountsAndLinks'=>1,'depositsAndFees'=>1,'applicantApply'=>0);
		$this->loadDataSets();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testFeeActionDisplaysForm()
	{
		
		$this->login('jvazquez','Test1234');
		$this->dispatch('applicant/create/fee');
		$this->assertXpath("//select[@id='feeId']",'Failed asserting that we have the select fees.Response:: '.$this->getResponse()->getBody());
	}

	public function testSaveWithNoSettingsPasses() {
		
		$this->login('jvazquez','Test1234');
		$this->request->setMethod('POST')
		->setPost(array());
		$this->dispatch('applicant/create/fee');
		$this->assertRedirect();
	}

	public function testEmailApplicantWithNoApplicantIdDisplaysError(){
		
		$this->login('jvazquez','Test1234');
		$this->dispatch('applicant/create/applicantemail');
		$this->assertQueryContentContains('p', 'The applicant id is missing',$this->getResponse()->getBody());
	}

	public function testEmailApplicantDisplaysForm(){
		
		$this->login('jvazquez','Test1234');
		$this->dispatch('applicant/create/applicantemail/applicant/1');
		$this->assertQueryCount('form', 1);
		$this->assertXpathCount('//input[@type=\'text\']', 1);
		$this->assertXpathCount('//textarea[@id=\'body\']', 1,$this->getResponse()->getBody());
	}

	public function testEmailApplicantPostEmptyBodyFails() {
		
		$this->login('jvazquez','Test1234');
		$request = array('body'=>null);
		$this->request->setMethod('POST')
		->setPost(array('to'=>'jorgeomar.vazquez@gmail.com'));
		$this->dispatch('applicant/create/applicantemail/applicant/1');
		$this->assertQueryContentContains('li', "Value is required and can't be empty");
	}

	public function testEmailApplicantWithNoUserIdDisplaysError(){
		
		$this->login('jvazquez','Test1234');
		$this->dispatch('applicant/create/waitlistemail');
		$this->assertQueryContentContains('p', 'The user id is not valid',$this->getResponse()->getBody());
	}

	public function testEmailWaitlistDisplaysForm(){
		
		$this->login('jvazquez','Test1234');
		$this->dispatch('applicant/create/waitlistemail/user/8');
		$this->assertQueryCount('form', 1,$this->getResponse()->getBody());
		$this->assertXpathCount('//input[@type=\'text\']', 1);
		$this->assertXpathCount('//textarea[@id=\'body\']', 1,$this->getResponse()->getBody());
	}

	public function testEmailUserWaitlistEmptyBodyFails() {
		
		$this->login('jvazquez','Test1234');
		$request = array('body'=>null);
		$this->request->setMethod('POST')
		->setPost(array('to'=>'jorgeomar.vazquez@gmail.com'));
		$this->dispatch('applicant/create/waitlistemail/user/8');
		$this->assertQueryContentContains('li', "Value is required and can't be empty");
	}
}
?>