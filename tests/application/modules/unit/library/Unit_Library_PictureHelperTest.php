<?php
/**
 * Test class for Unit_Library_PictureHelper.
 * Generated by PHPUnit on 2010-12-31 at 23:41:48.
 * @package tests.modules.unit.library
 */
class Unit_Library_PictureHelperTest extends ControllerTestCase
{

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('Units'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testInsertTest()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$ph = new Unit_Library_PictureHelper();
		$ph->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$props = $ph->getProperties();
		$dest = $props->pictures->files->destination;
		$args = array('type'=>'text','tmp_name'=>$dest."dummyfile",'name'=>'dummyfile','size'=>4);
//		$ph->setFileArgs($args);
//		$result = $ph->insert(1,'Test file');
		$this->assertTrue($result!=false,'We expected a true result'.$ph->getMessageState());
	}

	public function testGetQuotaSize()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$pictureHelper = new Unit_Library_PictureHelper();
		$result = $pictureHelper->getQuotaSize(1);
		$this->assertTrue($result!=0,'GetQuota should not return 0');
	}

	public function testMoveFile()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		//	Generate a mock file
		$this->mockFile();
		$ph = new Unit_Library_PictureHelper();
		$ph->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$props = $ph->getProperties();
		$dest = $props->pictures->files->destination;
		$args = array('file'=>array('picture'=>array('type'=>'text','tmp_name'=>"$dest/dummyfile",'name'=>'dummyfile','size'=>4)),'unitId'=>1);
		$result = $ph->moveFile($args);
		$this->trashMockFile();
		$this->assertTrue($result!=false,'Unable to move the file');
	}

	public function mockFile()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$ph = new Unit_Library_PictureHelper();
		$ph->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$properties = $ph->getProperties();
		$dest = $properties->pictures->files->destination;
		$cmd = "/bin/chmod -R ug+w  $dest 2>&1";
		$handle = popen($cmd, 'r');
		$output = null;
		while( !feof($handle) )
		{
			$output .=fread($handle,4096);
		}
		//		$this->assertTrue($output==='',"Restauration failed , please fix the upload directory");
		if($output!='')
		{
			echo "Restauration failed , please fix the upload directory";
		}
		$cmd = "/usr/bin/env echo \"Testing files\" > $dest/dummyfile 2>&1";
		$handle = popen($cmd, 'r');
		$output = null;
		while( !feof($handle) )
		{
			$output .=fread($handle,4096);
		}
		if($output!='')
		{
			echo "Unable to create dumy file";
		}
	}

	public function trashMockFile()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$ph = new Unit_Library_PictureHelper();
		$ph->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$properties = $ph->getProperties();
		//	Silently fail
		$dest = $properties->pictures->files->destination;
		$cmd = "rm -Rf $dest/dummyfile 2>&1";
		$handle = popen($cmd, 'r');
		$cmd = "rm -Rf $dest/1 2>&1";
		$handle = popen($cmd, 'r');
		$output = null;
		while( !feof($handle) )
		{
			$output .=fread($handle,4096);
		}
		if($output!='')
		{
			echo "Unnable to remove dummy file , it's jammed";
		}
	}

	public function testValidateUnitId()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$picture = new Unit_Library_PictureHelper();
		$valid = $picture->validateUnitId(1);
		$this->assertTrue($valid,'We are expecting a valid unit');
		$valid = $picture->validateUnitId('x44');
		$this->assertFalse($valid,'We are expecting a false result in validateUnitId');
		$this->assertEquals('unitIdNotValid',$picture->getMessageState());
	}
	
	/**
	 * @expectedException Exception
	 */
	public function testGetAddPictureForm()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$picture = new Unit_Library_PictureHelper();
		$form = $picture->getAddPictureForm();
	}

	public function testGetAddPictureFormPass()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$picture = new Unit_Library_PictureHelper();
		$picture->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$form = $picture->getAddPictureForm();
		$this->assertType('Zend_Form', $form,'We expect a child of Zend_Form');
	}

	public function testCalculateQuotaLimit()
	{
		$this->markTestSkipped("This is completely out of date and not working");
		$ph = new Unit_Library_PictureHelper();
		$ph->setProperties(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV);
		$result = $ph->calculateQuotaLimit(1024.78, 3048, $ph->getProperties()->pictures->quota->unit);
		$this->assertFalse($result,'Result operation should give false since the limit is set to: '.$ph->getProperties()->pictures->quota->unit);
	}
}
?>