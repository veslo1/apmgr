<?php
/**
 * Test class for Unit_Library_Impl_Service.
 * Generated by PHPUnit on 2011-02-06 at 19:23:01.
 * @internal Mocking seems a bit excesive in this test
 */
class Unit_Library_Impl_ServiceTest extends ControllerTestCase
{
    /**
     * @var Unit_Library_Impl_Service
     */
    protected $object;
    
    public function setUp()
    {
    	parent::setUp();
        $this->object = new Unit_Library_Impl_Service;
    }

    public function tearDown()
    {
    	parent::tearDown();
    }

    public function testFindById()
    {
  		$service = new Unit_Library_Impl_Service();
  		$row = new Zend_Db_Table_Row(array('data'=>array('id'=>1,'apartmentId'=>1,'number'=>1,'unitModelId'=>1)));
  		$dao = $this->getMock('Unit_Library_Impl_Dao',array('findById'));
  		$dao->expects($this->once())
  			->method('findById')
  			->will($this->returnValue($row));
  		$service->setDao($dao);
  		$this->assertInstanceOf('Unit_Model_Unit', $service->findById(1),'We expect an instance of unit');
  		$dao = null;
  		$dao = $this->getMock('Unit_Library_Impl_Dao',array('findById'));
  		$dao->expects($this->once())
  			->method('findById')
  			->will($this->returnValue(null));
  		$service->setDao($dao);
  		$this->assertNull($service->findById('fake'),'We expect a null result');
    }
    
    public function testFetchAll()
    {
    	$service = new Unit_Library_Impl_Service();
    	$rowargs = array('data'=>array( array('id'=>1,'apartmentId'=>1,'number'=>1,'unitModelId'=>1),array('id'=>2,'apartmentId'=>1,'number'=>2,'unitModelId'=>1) ) );
  		$row = new Zend_Db_Table_Row($rowargs);
  		$dao = $this->getMock('Unit_Library_Impl_Dao',array('fetchAll'));
  		$dao->expects($this->once())
  			->method('fetchAll')
  			->will($this->returnValue($row));
  		$service->setDao($dao);
  		$this->assertInternalType('array', $service->fetchAll(),'We expect an instance of unit');
    }

    public function testSave()
    {
  		$dao = $this->getMock('Unit_Library_Impl_Dao',array('save'));
  		$dao->expects($this->once())
  			->method('save')
  			->with($this->equalTo(new Unit_Model_Unit(array('number'=>'x','apartmentId'=>1,'unitModelId'=>12,'isAvailable'=>1,'yearBuilt'=>'1980','yearRenovated'=>'2010','dateAvailable'=>'2011-04-01'))))
  			->will($this->returnValue(1));
  		$service = new Unit_Library_Impl_Service();
  		$service->setDao($dao);
  		$this->assertTrue($service->save(array('number'=>'x','apartmentId'=>1,'unitModelId'=>12,'isAvailable'=>1,'yearBuilt'=>'1980','yearRenovated'=>'2010','dateAvailable'=>'2011-04-01'))!=false,"Save operation shouldn't have failed");
    }
/*
    public function testUpdate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    */
    public function testViewUnitsGraphics()
    {
    	$service = new Unit_Library_Impl_Service();
    	$row = new Zend_Db_Table_Row(array('data'=>array('id'=>1)));
    	
    	//	Fetch all result
    	$rowFile = new Zend_Db_Table_Row( 
    		array(
    			'data'=>
    			array('id'=>1,'path'=>'/usr/public/...','size'=>1024,'description'=>'House in the prairie','deleted'=>0,'mimeType'=>'img/png','filename'=>'house.png','dateCreated'=>date('Y-m-d H:i:s'),'dateUpdated'=>null),
    			array('id'=>2,'path'=>'/usr/public/...','size'=>2024,'description'=>'House in the prairie side b','deleted'=>0,'mimeType'=>'img/png','filename'=>'house.png','dateCreated'=>date('Y-m-d H:i:s'),'dateUpdated'=>null)
    		) 
    	);
    	
		//	Fetch all result for file
    	$rowUnitFile = new Zend_Db_Table_Row( 
    		array(
    			'data'=>
    			array(
    					array('id'=>1,'unitId'=>1,'fileId'=>1,'dateCreated'=>date('Y-m-d H:i:s'),'dateUpdated'=>null),
    					array('id'=>2,'unitId'=>1,'fileId'=>2,'dateCreated'=>date('Y-m-d H:i:s'),'dateUpdated'=>null)
    				)
    		) 
    	);
    	$dao = $this->getMock('Unit_Library_Impl_Dao', array('exists','setTemplate'), 
    		array( 1,new Unit_Model_DbTable_Unit() )
    	);
    	$dao->expects($this->once())
    		->method('exists')
    		->with($this->equalTo(array('column'=>'id','table'=>'unit'),1))
    		->will($this->returnValue(true));
    		
		//	We simulate a return value for this unit
    	$unitFileDao = $this->getMock('Unit_Library_Impl_Dao' , array('exists','fetchAll','setTemplate') , array(1, new Unit_Model_DbTable_UnitFile()) );
    	$unitFileDao->expects($this->once())
    				->method('exists')
    				->with($this->equalTo(array('column'=>'unitId','table'=>'unitFile'),1))
    				->will($this->returnValue(true));
		$unitFileDao->expects($this->once())
					->method('fetchAll')
					->with($this->equalTo('unitId=1'))
					->will($this->returnValue($rowUnitFile));
    				
    	$fileDao = $this->getMock('File_Library_Impl_Dao', array('findById' , 'setTemplate'), array(1,new File_Model_DbTable_File()) );
    	$fileDao->expects($this->any())
    			->method('findById')
    			->will($this->returnValue($rowFile));
    			
    	$service->setDao($dao);
    	$service->setUnitFileDao($unitFileDao);
    	$service->setFileDao($fileDao);
    	$files = $service->viewUnitsGraphics(1);
    	$this->assertNotEmpty($files,"The retrieved files are empty");
    	$this->assertEmpty($service->getMessageState(),'We expect an empty message');
    }
    
    public function testAddPicture()
    {
    	$service = new Unit_Library_Impl_Service();
    	$form = $this->getMock('Unit_Form_AddFiles', array('receive','getFileInfo') );
    	$form->expects( $this->once() )
    		 ->method('receive')
    		 ->will($this->returnValue(true));
    	$form->expects($this->once())
    		 ->method('getFileInfo')
    		 ->will($this->returnValue(true));
    	$form->setProperties(new Zend_Config_Ini(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV));
    	$form->setForm();
    	$service->setForm($form);

    	$pictureHelper = $this->getMock('Unit_Library_PictureHelper', array('moveFile')  );
    	$pictureHelper->expects($this->once())
    		->method('moveFile')
    		->will($this->returnValue(true));

    	$row = new Zend_Db_Table_Row(array('data'=>array('id'=>1,'apartmentId'=>1,'description'=>'foo')));
    	$dao = $this->getMock('Unit_Library_Impl_Dao' , array('findById') ,array(1) );
    	$dao->expects($this->once())
    		->method('findById')
    		->with($this->equalTo(1))
    		->will($this->returnValue($row));
    		
    	$service->setDao($dao);
    	$this->assertTrue($service->addPicture(array('description'=>'foo','unitId'=>1),$pictureHelper),'We expect a true result');
    }
    
    public function testPrepareAddPicture()
    {
    	$service = new Unit_Library_Impl_Service();
    	$dao = $this->getMock('Unit_Library_Impl_Dao', array('exists') );
    	$dao->expects($this->once())
    		->method('exists')
    		->with($this->equalTo(array('column'=>'id','table'=>'unit'),1))
    		->will($this->returnValue(true));
    	$service->setDao($dao);
    	$this->assertTrue($service->prepareAddPicture(1),'We expected a true result');
    	$dao = null;
    	$dao = $this->getMock('Unit_Library_Impl_Dao', array('exists') );
    	$dao->expects($this->once())
    		->method('exists')
    		->with($this->equalTo(array('column'=>'id','table'=>'unit'),1))
    		->will($this->returnValue(false));
    	$service->setDao($dao);
    	$this->assertFalse($service->prepareAddPicture(1),'We expected a false result');
    	$this->assertEquals(array('msg'=>'unitIdNotValid','type'=>'error'),$service->getMessageState(),'We expect an error message tellings us that the unit is not valid');
    }
    
    public function testInsertPicture()
    {
		$row = new Zend_Db_Table_Row(	array('data'=>array('id'=>1,'apartmentId'=>1) ) );
    	$service = new Unit_Library_Impl_Service();
    	$formMockArgs = array(
    		'picture'=>array(
    			'type'=>'img/png',
    			'name'=>'testimage.png',
    			'size'=>9000
    		)
    	);
    	$form = $this->getMock('Unit_Form_AddFiles', array('getFileInfo','getProperties') );
    	$form->expects($this->once())
    	     ->method('getFileInfo')
    	     ->will($this->returnValue($formMockArgs));
    	$form->expects($this->once())
    		->method('getProperties')
    		->will($this->returnValue(new Zend_Config_Ini(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV)));
    	$form->setProperties(new Zend_Config_Ini(APPLICATION_PATH.'/modules/unit/config/config.ini',APPLICATION_ENV));
    	$form->setForm();
    	$fileDao = $this->getMock('File_Library_Impl_Dao' , array('transactionSave','setTemplate') , array(null,new File_Model_DbTable_File()) );
    	$fileDao->expects($this->once())
    			->method('transactionSave')
    			->will($this->returnValue(1));
    	$dao = $this->getMock('Unit_Library_Impl_Dao',array('findById','setTemplate') , array(null,new Unit_Model_DbTable_Unit()) );
    	$dao->expects($this->once())
    			->method('findById')
    			->will($this->returnValue($row));
    	$service->setFileDao($fileDao);
    	$service->setDao($dao);
    	$service->setForm($form);
    	$args = array('unitId'=>1);
    	$this->assertTrue( $service->insertPicture($args)!=false ,'We expect a valid result' );
    }
}
?>
