<?php
/**
 * Test class for Unit_Library_Reports_UnoccupiedUnitsTest
 * Generated by PHPUnit on 2010-10-29 at 23:31:16.
 */
// phpunit --no-configuration --bootstrap application/bootstrap.php application/modules/unit/library/reports/Unit_Reports_UnoccupiedUnitsTest.php
class Unit_Library_Reports_UnoccupiedUnitsTest extends ControllerTestCase {

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('unoccupiedUnitsReport'=>1);
		$this->login('jvazquez','Test1234');
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testInitDb()
	{
		$object = new Unit_Library_Reports_UnoccupiedUnits;
		$object->setGatewayLink(Unit_Library_Reports_UnoccupiedUnits::DB);
		$db = $object->getGatewayLink();
		$this->assertType('Zend_Db_Adapter_Pdo_Mysql', $db);
	}

	public function testConfigureCache()
	{
		$object = new Unit_Library_Reports_UnoccupiedUnits(array('cacheIdentifier'=>'unoccupiedUnits'));
		$object->setCacheFrontEnd('Core');
		//			$object->setCacheBackEnd('Apc');
		$object->setCacheBackEnd('File');
		$object->configureCacheFrontEnd();
		$object->configureCacheBackEnd();
		$object->initCacheManager();
		$this->assertType('Zend_Cache_Manager',$object->getCacheManager());
	}

	public function testRunReportNoCache()
	{
		$object = new Unit_Library_Reports_UnoccupiedUnits(array('cacheIdentifier'=>'unoccupiedUnits'));
		$result = $object->runReport(false);
		//		print $object->getQuery()->__toString(); die;
		$this->assertTrue(count($result)>0,'The query failed to obtain results');			
	}	

	public function testRunReportWithCache()
	{
		$object = new Unit_Library_Reports_UnoccupiedUnits(array('cacheIdentifier'=>'unoccupiedUnits'));
		$object->setCacheFrontEnd('Core');
		$object->setCacheBackEnd('File');
		$object->configureCacheFrontEnd();
		$object->configureCacheBackEnd();
		$object->initCacheManager();
		$object->prepareCacheSeed();
		$result = $object->runReport(true);
		$this->assertTrue(count($result)>0,'The query failed to obtain results');
		//	Since we did not seed the object, the tags will match
		$this->assertEquals(Unit_Library_Reports_UnoccupiedUnits::DEFAULTSEED,$object->getSeed());
	}

	public function testQueryWithSort()
	{
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'unitNumber');
		$object = new Unit_Library_Reports_UnoccupiedUnits($args);
		$result = $object->runReport(false);
		//var_dump($object->getQuery()); die;
		$this->assertTrue(preg_match('/ORDER BY unitNumber ASC/',$object->getQuery())==1,$object->getQuery());
	}

	public function testHandleQueryParamsMultiple()
	{
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'unitNumber','page'=>2,
        			'cacheIdentifier'=>Unit_Library_Reports_UnoccupiedUnits::CACHEIDENTIFIER);
		$object = new Unit_Library_Reports_UnoccupiedUnits($args);
		$object->prepareCacheSeed();		
		$this->assertEquals('unoccupiedUnitsReportpage2unitNumberASC',$object->getSeed());
	}

	public function testHandleQueryParamsPagination()
	{
		$args = array('page'=>2);
		$object = new Unit_Library_Reports_UnoccupiedUnits($args);
		$object->prepareCacheSeed();
		$this->assertEquals('unoccupiedUnitsReportpage2',$object->getSeed());
	}

	public function testHandleQueryParamsBadPagination()
	{
		$args = array('fakee'=>2);
		$object = new Unit_Library_Reports_UnoccupiedUnits($args);
		$object->prepareCacheSeed();
		$this->assertEquals('unoccupiedUnitsReport',$object->getSeed());
		unset($object);
		$args = array('page'=>"x3");
		$object = new Unit_Library_Reports_UnoccupiedUnits($args);
		$object->prepareCacheSeed();
		$this->assertEquals('unoccupiedUnitsReport',$object->getSeed());
	}
/*
	public function testExportReportCreatesFile()
	{
		ob_start();
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,ZFInterfaces_Sortable::COLUMN=>'unitNumber','cacheIdentifier'=>'rentRoll');
		$object = new Financial_Library_Reports_RentRoll($args);
		$this->assertEquals($args['cacheIdentifier'],$object->getCacheIdentifier());
		$object->setCacheFrontEnd('Core');
		$object->setCacheBackEnd('File');
		$object->configureCacheFrontEnd();
                $object->configureCacheBackEnd();
                $object->initCacheManager();
                $object->prepareCacheSeed($args);
	        $result = $object->runReport(true);
		$result = $object->exportReport();
		$this->assertTrue($result,'Export report failed to generate a report');
		ob_end_clean();
	}
*/
}
?>