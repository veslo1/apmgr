<?php
/**
 * Test class for Calendar_Model_EventsTime.
 * Generated by PHPUnit on 2010-04-02 at 16:26:32.
 */
class Calendar_Model_EventsTimeTest extends ControllerTestCase {
    /**
     * @var Calendar_Model_EventsTime
     */
    protected $object;

    /* (non-PHPdoc)
     * @see tests/application/ControllerTestCase::setUp()
     */
    public function setUp() {
        parent::setUp();
        $this->dataSetStackBuffer = array('users'=>1);
		$this->loadDataSets();
        $this->object = new Calendar_Model_EventsTime;
    }

    /* (non-PHPdoc)
     * @see tests/application/ControllerTestCase::tearDown()
     */
    public function tearDown() {
    	$this->unLoadDataSets();
    	parent::tearDown();
        unset($this->object);
        $this->db->query('DELETE FROM eventsTime');
    }

    public function testGetStartTime()
    {
    	
        $time = mktime(10, 00, 00);//strtotime('2010-04-02');
        $this->object->setStartTime($time);
        $this->assertEquals('10:00:00', $this->object->getStartTime(), 'Did not retrieve the same time');
    }

    public function testSetEndTime()
    {
    	
        $props = $this->object->getProperties();
        $time = mktime(11, 00, 00);//strtotime('2010-04-02');
        $this->object->setEndTime($time);
        $this->assertEquals('11:00:00', $this->object->getEndTime(), 'Did not retrieve the same time');
    }

    public function testSetEventId()
    {
    	
        $this->object->setEventId(1);
        $this->assertEquals(1, $this->object->getEventId(), 'Did not retrieve the same event');
    }

    public function testGetEventDate()
    {
    	
        $time = mktime(0, 0, 0,04,02,2010);
        $this->object->setStartDate($time);
        $this->assertEquals('2010-04-02', $this->object->getStartDate(),'The event date failed');
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testSetEndTimeWithNullThrowsException()
    {
    	
        $this->object->setStartDate(null);
    }

    public function testCompareDates()
    {
    	
        $date = mktime(0, 0, 0, 4,2,2010);
        $this->object->setStartDate($date);
        $this->object->setEndDate($date);
        $this->assertEquals(0, $this->object->hasDates(), 'Date check failed');
        $newDate = mktime(0,0,0,4,4,2010);
        $this->object->setEndDate($newDate);
        $this->assertEquals(-1, $this->object->hasDates(), 'Date check failed for greater date in endDate');
        $newDate = mktime(0,0,0,4,1,2010);
        $this->object->setEndDate($newDate);
        $this->assertEquals(1, $this->object->hasDates(), 'Date check failed for lower date in endDate');
    }

    public function testCompareTimes()
    {
    	
        $time = mktime(10, 0, 0);
        $this->object->setStartTime($time);
        $this->object->setEndTime($time);
        $this->assertEquals(0, $this->object->hasTime(), 'Time check failed');
        $newTime = mktime(11,0,0);
        $this->object->setEndTime($newTime);
        $this->assertEquals(-1, $this->object->hasTime(), 'Time check failed for greater time in endTime');
    }

    public function testYielding()
    {
    	
        $date = mktime(0, 0, 0, 4,2,2010);
        $this->object->setStartDate($date);
        $dateTo = mktime(0, 0, 0, 5,1,2010);
        $this->object->setEndDate($dateTo);
        //$this->object->hasDates();returns -1
        $this->object->yieldDates();
        $count =$this->object->getRecursiveDates();
        $this->assertTrue($count>0,'We did\'t generate enough days');
    }

    public function testPrepareSaveRegular()
    {
    	
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>0,'owner'=>1));
        $eventId = $cal->save();
        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-01','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>0);
        $ce = new Calendar_Model_EventsTime();
        $result = $ce->prepareSave($options);
        $this->assertEquals('11:00:00', $ce->getStartTime(), 'Failed keeping the date');
        $this->assertEquals('12:00:00', $ce->getEndTime(), 'Failed keeping the date');
        $this->assertTrue($result!=false,'Save failed');
    }

    public function testPrepareSaveAltered()
    {
    	
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>1));
        $eventId = $cal->save();
        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-01','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>1);
        $ce = new Calendar_Model_EventsTime();
        $props = $ce->getProperties();
        $result = $ce->prepareSave($options);
        $this->assertEquals($props->time->firsthour, $ce->getStartTime(), 'Failed Altering the start time');
        $this->assertEquals($props->time->lasthour, $ce->getEndTime(), 'Failed Altering the end time');
        $this->assertTrue($result!=false,'Save failed');
    }

    public function testPrepareSaveBigDatesNoTimeChange()
    {
    	
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>0,'owner'=>1));
        $eventId = $cal->save();
        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-30','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>0);
        $ce = new Calendar_Model_EventsTime();
        $result = $ce->prepareSave($options);
        $this->assertEquals('11:00:00', $ce->getStartTime(), 'Failed keeping the date');
        $this->assertEquals('12:00:00', $ce->getEndTime(), 'Failed keeping the date');
        $this->assertEquals('2010-04-30', $ce->getStartDate(), 'The date array failed to set the start day,startDate');
        $this->assertEquals('2010-04-30', $ce->getEndDate(), 'The date array failed to set the last day,endDate');
        $this->assertTrue($result!=false,'Save failed');
    }

    public function testPrepareSaveBigDatesWithTimeChange()
    {
    	
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>1));
        $eventId = $cal->save();
        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-30','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>$cal->getAllDayEvent());
        $ce = new Calendar_Model_EventsTime();
        $result = $ce->prepareSave($options);
        $ce = new Calendar_Model_EventsTime();
        $props = $ce->getProperties();
        $result = $ce->prepareSave($options);
        $this->assertEquals($props->time->firsthour, $ce->getStartTime(), 'Failed Altering the start time');
        $this->assertEquals($props->time->lasthour, $ce->getEndTime(), 'Failed Altering the end time');
        $this->assertEquals('2010-04-30', $ce->getStartDate(), 'The date array failed to set the start day,startDate');
        $this->assertEquals('2010-04-30', $ce->getEndDate(), 'The date array failed to set the last day,endDate');
        $this->assertTrue($result!=false,'Save failed');
    }

    public function testDeletePass()
    {
    	
        $this->login('jvazquez', 'Test1234');
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>1));
        $eventId = $cal->save();
        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-30','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>$cal->getAllDayEvent());
        $ce = new Calendar_Model_EventsTime();
        $result = $ce->prepareSave($options);
        $results = $ce->findByKey(array('search'=>array('eventId'=>$eventId)));
        $eventTimeId = $results[0]->getId();
        $result = $ce->deleteByEventId($eventId,$eventTimeId);
        $this->assertTrue($result!=false,'Deleting events failed');
    }

    public function testDeleteFailsDueToOnlyOneRecord()
    {
    	
        $this->login('jvazquez', 'Test1234');
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>1));
        $eventId = $cal->save();

        $options = array('startDate'=>'2010-04-01','endDate'=>'2010-04-01','startTime'=>'11:00:00','endTime'=>'12:00:00','eventId'=>$eventId,'allDayEvent'=>$cal->getAllDayEvent());
        $ce = new Calendar_Model_EventsTime();
        $result = $ce->prepareSave($options);

        $results = $ce->findByKey(array('search'=>array('eventId'=>$eventId)));
        $eventTimeId = $results[0]->getId();
        $result = $ce->deleteByEventId($eventId,$eventTimeId);

        $this->assertTrue($result==false,'Deleting events passed when it should have failed');
    }
}
?>