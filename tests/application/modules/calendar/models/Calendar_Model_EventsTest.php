<?php
/**
 * Test class for Calendar_Model_Events.
 * Generated by PHPUnit on 2010-04-02 at 13:10:22.
 */
class Calendar_Model_EventsTest extends ControllerTestCase {
    /**
     * @var Calendar_Model_Events
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        $this->dataSetStackBuffer = array('users'=>1);
		$this->loadDataSets();
        $this->object = new Calendar_Model_Events();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
    	$this->unLoadDataSets();
    	parent::tearDown();
        $this->db->query('DELETE FROM events');
        unset($this->object);
    }

    /**
     * @todo Implement testGetProperties().
     */
    public function testGetProperties()
    {
    	
        $props = $this->object->getProperties();
        $this->assertType('Zend_Config_Ini', $props,'Setting the properties failed');
    }

    public function testSave()
    {
    	
        $this->object->setOwner(1)
                ->setTitle('Dummy Title')
                ->setData('Mercurial is a piece of shit')
                ->setAllDayEvent(0);
        $saved = $this->object->save();
        $this->assertTrue($saved!=false,'The save command failed');
    }

    public function testUpdate()
    {
    	
        $this->object->setOwner(1)
                ->setTitle('Dummy Title')
                ->setData('Mercurial is a piece of shit')
                ->setAllDayEvent(0);
        $saved = $this->object->save();
        $this->assertTrue($saved!=false,'The save command failed');
        $this->object->setId($saved);
        $this->object->setData('Yes it\'s a real piece of shit');
        $updated = $this->object->save();
        $this->assertTrue($updated!=false,'Update command failed');
    }

    public function testDelete()
    {
    	
        $this->object->setOwner(1)
                ->setTitle('Dummy Title')
                ->setData('Mercurial is a piece of shit')
                ->setAllDayEvent(0);
        $saved = $this->object->save();
        $this->assertTrue($saved!=false,'The save command failed');
        $deleted = $this->object->delete($saved);
        $this->assertTrue($deleted!=false,'Delete command failed');
    }

    public function testShowEventDayReturnsArray()
    {
    	
        $this->login('jvazquez', 'Test1234');
        //  Feed the events
        $start = date('Y-m-d',mktime(null, null, null, 04, 1,date('Y')));
        $end = date('Y-m-d',mktime(null, null, null, 04, 30,date('Y')));
        $this->login('jvazquez', 'Test1234');
        $this->request->setMethod('POST')
                ->setPost(array(
                'title' => 'fooTitle',
                'data' => 'Data for a fake tests',
                'allDayEvent' => 0,
                'startDate' => $start,
                'endDate' => $end,
                'startTime' => '09:0:00',
                'endTime' => '10:30:00'
                )
        );
        $this->dispatch('calendar/create');
        $this->resetRequest()
                ->resetResponse();
        $result = $this->object->findByKey( array( 'search'=> array( 'title'=>'fooTitle' ) ) );
        $this->assertTrue(count($result)>=0);
        $id = array_shift($result)->getId();
        $sortEventTime =array('column'=>'startDate','sort'=>'desc');
        $sortGuests = array('column'=>null,'sort'=>'asc');
        $result = $this->object->showSingleDayEvent($id,$sortEventTime,$sortGuests);
        $this->assertType('array', $result);
        $this->assertArrayHasKey('event',$result);
        $this->assertTrue($result['event']->getId()==$id,'Failed to retrieve the proper object id');
        $this->assertTrue($result['event']->getTitle()=='fooTitle','Failed to retrieve the proper title for this object');
        $this->assertArrayHasKey('eventTime',$result);
        $this->assertTrue($result['eventTime'][0]->getStartDate()==$end,'Failed to retrieve the last record sorted with desc');
        $this->assertArrayHasKey('eventNotification', $result);
    }

    public function testEventOwnerPass()
    {
    	
        $this->login('jvazquez', 'Test1234');
        $userId = User_Library_Helper_Utils::currentUserId();
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>$userId));
        $eventId = $cal->save();
        $args = array('user'=>$user,'eventId'=>$eventId);
        $result = $cal->ownership($args);
        $this->assertTrue($result,'We exepected to validate that we were the owner');
    }

    public function testEventOwnerFails()
    {
    	
        $cal = new Calendar_Model_Events(array('title'=>'truff','data'=>'crap','allDayEvent'=>1,'owner'=>1));
        $eventId = $cal->save();
        $this->login('jmember','Test1234');
        $args = array('user'=>new User_Model_User(),'eventId'=>$eventId);
        $result = $cal->ownership($args);
        $this->assertFalse($result,'We expected a false result');
    }
}
?>