<?php
/**
 * Test class for Applicant_Model_ApplicantHelper.
 * Generated by PHPUnit on 2010-06-08 at 20:31:19.
 */
class Applicant_Library_Helper_ApplyTest extends ControllerTestCase {
	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::setUp()
	 */

	public function setUp()
	{
		parent::setup();
		$this->dataSetStackBuffer = array('users'=>1,'applicantApply'=>0,'accountsAndLinks'=>1,'depositsAndFees'=>1,'bills'=>1,'applicantStatus'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::tearDown()
	 */
	public function tearDown()
	{
		parent::tearDown();
	}

	#applicant/apply/index/model/2/unit/2/apartment/1
	public function testGetFormWillReturnDefaultFormAuthenticated() {
		
		$request = array('model'=>1,'apartment'=>2,'unit'=>2);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertEquals($apHelper->getIsError(),true,'We expected an error because that unit is not for rent');
	}

	public function testGetFormWillReturnNullWhenRequestIsWrong() {
		
		$request = array('model'=>1);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertEquals($apHelper->getIsError(),true,'We did not expect an error');
	}

	public function testValidateGetParamsWillFailIfMissingUnitId() {
		
		$request = array('model'=>1,'apartment'=>2,'save'=>true);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue($apHelper->getIsError(),'We expected to fail due to missing unit id');
		$this->assertTrue(count($apHelper->getStackError())>0,'StackError should be greater than 0');
	}

	public function testValidateGetParamsWillFailIfMissingUnitIdIsNotInt() {
		
		$request = array('model'=>1,'apartment'=>2,'save'=>true,'unit'=>'foo');
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue($apHelper->getIsError(),'We expected to fail due to missing unit id');
		$this->assertTrue(count($apHelper->getStackError())>0,'StackError should be greater than 0');
		$error = $apHelper->getStackError();
		$this->assertEquals($error['hasUnit'],'unitIdNotValid','The error messages do not match');
	}

	public function testValidateGetParamsWillFailIfMissingApartmentId() {
		
		$request = array('model'=>1,'unit'=>2,'save'=>true);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue($apHelper->getIsError(),'We expected to fail due to missing apartment id');
		$this->assertTrue(count($apHelper->getStackError())>=1,'StackError should be greater than 0');
		$error = $apHelper->getStackError();
		$this->assertEquals($error['hasApartment'],'apartmentIdMissing','The error messages do not match');
	}

	public function testValidateGetParamsWillFailIfMissingApartmentIdIsNotInt() {
		
		$request = array('model'=>1,'apartment'=>'Drain you','save'=>true,'unit'=>1);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue(count($apHelper->getStackError())>0,'StackError should be greater than 0, we got cero');
		$error = $apHelper->getStackError();
		$this->assertEquals($error['hasApartment'],'apartmentIdNotValid','The error messages do not match');
	}

	public function testValidateGetParamsWillFailIfMissingModel() {
		
		$request = array('unit'=>2,'save'=>true,'apartment'=>1);
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue($apHelper->getIsError(),'We expected to fail due to missing model id');
		$this->assertTrue(count($apHelper->getStackError())>=1,'StackError should be equal to 1');
		$error = $apHelper->getStackError();
		$this->assertEquals($error['hasModel'],'modelIdIsMissing','The error messages do not match');
	}

	public function testValidateGetParamsWillFailIfModelIsNotInt() {
		
		$request = array('unit'=>2,'save'=>true,'apartment'=>1,'model'=>'dunga');
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue(count($apHelper->getStackError())>=1,'StackError should be equal to 1');
		$error = $apHelper->getStackError();
		$this->assertEquals($error['hasModel'],'modelIdNotValid','The error messages do not match');
	}


	public function testGetIsError() {
		
		$request = array('unit'=>2,'save'=>true,'apartment'=>1,'model'=>'dunga');
		$apHelper = new Applicant_Library_Helper_Apply();
		$apHelper->validateGetParams($request);
		$this->assertTrue(count($apHelper->getStackError())>=1,'StackError should be equal to 1');
		$this->assertTrue($apHelper->getIsError(),'Is error should be true');
	}

	public function testAuthenticated()
	{
		
		$this->login('jvazquez','Test1234');
		$apHelper = new Applicant_Library_Helper_Apply();
		$result = $apHelper->authenticateUser(array( 'username'=>'jvazquez','emailAddress'=>'jvazquez@debserverp4.com.ar','password'=>'Test1234'),false);
		$this->assertTrue($result,'Authenticate user returned false');
		$this->logout();
	}

	public function testAuthenticatedFails() {
		
		$apHelper = new Applicant_Library_Helper_Apply();
		$result=$apHelper->authenticateUser( array(null),false);
		$this->assertFalse($result);
	}

	public function testRouteUserContractReturnsTrashAccountAction() {
		
		  $args = array(
		  				'module' => 'applicant',
    					'controller' => 'apply',
    					'action' => 'authorization',
    					'applicantSignature' => 'jov',
    					'spouseSignature' =>null,
    					'acceptedContract' => 0,
		  				'applicantId'=>1,
    					'submit' => 'Save'
    					);
		$wf = new Applicant_Library_WorkflowHelper();
		$wf->initSession();
		$wf->setSessionSteps('steps',$wf->getSteps());
		$wf->setSessionSteps('applicantId', 1);
    	$apHelper = new Applicant_Library_Helper_Apply( array( 'workFlowHelper'=>$wf ));
    	$result = $apHelper->routeUserContract($args);
    	$this->assertType('string',$result);
    	$this->assertEquals('applicant/apply/removeinfo',$result);
    	$wf->terminateSession();
	}

	public function testRouteUserContractReturnsEndAction() {
		
		$args = array( 'module' => 'applicant', 'controller' => 'apply', 'action' => 'authorization', 'applicantSignature' => 'jov', 'spouseSignature' =>null, 'acceptedContract' => 1, 'applicantId'=>3, 'submit' => 'Save','unitId'=>1);
		$wf = new Applicant_Library_WorkflowHelper();
		$wf->initSession();
		$wf->setSessionSteps('applicantId', 3);
        $wf->setSessionSteps('unitId',1);
		$wf->setSessionSteps('steps',$wf->getSteps());
    	$apHelper = new Applicant_Library_Helper_Apply(array( 'workFlowHelper'=>$wf));
    	$result = $apHelper->routeUserContract($args);
    	$this->assertType('string',$result);
    	$this->assertEquals('applicant/apply/end',$result);
    	$wf->terminateSession();
	}

	public function testConfirmPurgeNoGoesBackToAuthorization() {
		
		$args = array(
		  				'module' => 'applicant',
    					'controller' => 'apply',
    					'action' => 'removeinfo',
    					'deleteInfo' => 0,
    					'submit' => 'Save'
    				);
		$this->login('applicant','Test1234');
		$wf = new Applicant_Library_WorkflowHelper();
		$wf->initSession();
		$wf->setSessionSteps('applicantId', 1);
    	$apHelper = new Applicant_Library_Helper_Apply(array('workFlowHelper'=>$wf));
    	$result=$apHelper->confirmPurge($args);
    	$this->assertEquals('applicant/apply/authorization', $result);
    	$wf->terminateSession();
	}

	public function testConfirmPurgeYesKillsUserAndEndsSession() {
		
		$wf = new Applicant_Library_WorkflowHelper();
		$wf->initSession();
		$wf->setSessionSteps('applicantId', 1);
		$args = array(
		  				'module' => 'applicant',
    					'controller' => 'apply',
    					'action' => 'removeinfo',
    					'deleteInfo' => 1,
    					'submit' => 'Save',
						'applicantId'=>1
    				);
		$this->login('applicant','Test1234');
    	$apHelper = new Applicant_Library_Helper_Apply(array( 'workFlowHelper'=>$wf));
    	$result=$apHelper->confirmPurge($args);
    	$this->assertEquals('user/login/logout', $result);
    	$wf->terminateSession();
	}
}
?>
