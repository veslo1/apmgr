<?php
/**
 * Test class for Applicant_Library_Helper_Update.
 * Generated by PHPUnit on 2010-10-17 at 16:06:45.
 */
class Applicant_Library_Helper_UpdateTest extends ControllerTestCase
{
	/**
	 * @var Applicant_Library_Helper_Update
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1,'applicantApply'=>0,'applicantStatus'=>1);
		$this->loadDataSets();
		$this->object = new Applicant_Library_Helper_Update;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testSetApplicantId()
	{
		
		$this->object->setApplicantId(1);
		$this->assertEquals(1,$this->object->getApplicantId(),'Setter for applicantId failed');
	}

	public function testGetApplicant()
	{
		
		$this->object->setApplicantId(1);
		$this->assertEquals(1,$this->object->getApplicantId(),'Setter for applicantId failed');
	}

	public function testSetPersist()
	{
		
		$this->object->setPersist(1);
		$this->assertEquals(1,$this->object->getPersist(),'Setter for persist failed');
	}

	public function testGetPersist()
	{
		
		$this->object->setPersist(1);
		$this->assertEquals(1,$this->object->getPersist(),'Setter for persist failed');
	}

	public function testConstructArray()
	{
		
		$args = array('applicantId'=>1,'persist'=>0);
		$update = new Applicant_Library_Helper_Update($args);
		$this->assertEquals(1,$update->getApplicantId(),'Array constructor failed for applicantId');
		$this->assertEquals(0,$update->getPersist(),'Array constructor failed for persist');
	}

	public function testApplicantIsValid()
	{
		
		$args = array('applicantId'=>16,'persist'=>0);
		$update = new Applicant_Library_Helper_Update($args);
		$this->assertFalse($update->validApplicant(),'The valid applicant should return false');
		$this->assertEquals('applicantIdNotValid',$update->getMessageState());
	}

	public function testSave(){
		
		$this->login('jvazquez','Test1234');
		$args = array('applicantId'=>1,'persist'=>0,'notes'=>'This is a test','currentStatus'=>1);
		$update = new Applicant_Library_Helper_Update($args);
		$updated = $update->save($args);
		$this->assertTrue($updated!=false,'Update operation failed');
	}

	public function testSaveFails(){
		
		$args = array('applicantId'=>1,'persist'=>0,'notes'=>'This is a test');
		$update = new Applicant_Library_Helper_Update($args);
		$updated = $update->save($args);
		$this->assertFalse($updated,'Update operation should have failed');
		$this->assertEquals($update->getMessageState(),'missingUserId');
	}

	public function testSaveAndUpdatesBackgroundCheckPreviousRecord()
	{
		
		$this->db->query("DELETE FROM applicantBackgroundCheck");
		$this->login('jvazquez','Test1234');
		$args = array('applicantId'=>1,'persist'=>0,'notes'=>'Grep this','status'=>'notrun');
		$update = new Applicant_Library_Helper_Update($args);
		$updated = $update->save($args);
		$this->assertTrue($updated!=false,'Update operation failed');

		//	We look the applicant to verify that he only has one record
		$bgc = new Applicant_Model_BackgroundCheck();
		$result = $bgc->findByKey(array('search'=>array('applicantId'=>$args['applicantId'])));
		$this->assertNotNull($result,'The insert operation failed');
		$bgc = array_shift($result);
		$this->assertEquals(1,$bgc->getCurrentStatus(),'The current status is not set to one');
		$this->assertEquals('notrun',$bgc->getStatus(),'Status mismatch');
		$this->assertEquals(1,count($bgc),'We have more results,we should have one');

		//	Now we perform the verification that status passed is currentStatus=1
		$args = array('applicantId'=>1,'persist'=>0,'notes'=>'This is a test to move the user','status'=>'passed');
		$update = new Applicant_Library_Helper_Update($args);
		$updated = $update->save($args);
		$this->assertTrue($updated!=false,'Update operation failed');

		$bgc = new Applicant_Model_BackgroundCheck();
		$result = $bgc->findByKey(array('search'=>array('applicantId'=>$args['applicantId'])));
		$currentMatch = array();
		$expectedMatch = array( array('status'=>'notrun','currentStatus'=>0),array('status'=>'passed','currentStatus'=>1) );
		foreach($result as $id=>$bgc)
		{
			$currentMatch[]=array( 'status'=>$bgc->getStatus(),'currentStatus'=>$bgc->getCurrentStatus() );
		}
		$this->assertEquals(count($expectedMatch),count($currentMatch),'Difference in the check');
		$this->assertEquals($expectedMatch, $currentMatch);
	}

	public function testGetUpdateWorkflowStatusForm(){
		
		$args = array('applicantId'=>1,'persist'=>1);
		$update = new Applicant_Library_Helper_Update($args);
		$form = $update->getWorkflowStatusForm();
		$this->assertType('Zend_Form',$form);
		$this->assertEquals('japplicant test',$form->getElement('applicantName')->getValue());
	}

	public function testValidApplicantWorkflowFailsDueToMissingApplicantId(){
		
		$args = array('persist'=>1);
		$update = new Applicant_Library_Helper_Update($args);
		$result = $update->validApplicantWorkflow();
		$this->assertFalse($result,'Validate should return false');
		$this->assertEquals('noRecordFound',$update->getMessageState(),'The message state should indicate that there aren\'t any records found');
	}

	public function testValidApplicantWorkflowFailsDueToFakeApplicantId(){
		
		$args = array('persist'=>1,'applicantId'=>17);
		$update = new Applicant_Library_Helper_Update($args);
		$result = $update->validApplicantWorkflow();
		$this->assertFalse($result,'Validate should return false');
		$this->assertEquals('noRecordFound',$update->getMessageState(),'The message state should indicate that there aren\'t any records found');
	}

	public function testValidateWorkflowStatusChange(){
		
		$this->login('jvazquez','Test1234');
		$args = array('applicantId'=>1,'applicantStatusId'=>1);
		$helper = new Applicant_Library_Helper_Update($args);
		$updated = $helper->saveWorkflowChange($args);
		$this->assertTrue($updated!=false,$helper->getMessageState());
	}
}
?>