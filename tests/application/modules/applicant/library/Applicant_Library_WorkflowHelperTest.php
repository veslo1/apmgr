<?php
/**
 * Test class for Applicant_Library_WorkflowHelper.
 * Generated by PHPUnit on 2010-08-16 at 11:55:34.
 */
class Applicant_Library_WorkflowHelperTest  extends ControllerTestCase
{
	/**
	 * @var Applicant_Library_WorkflowHelper
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1,'applicantApply'=>0,'accountsAndLinks'=>1,'depositsAndFees'=>1,'bills'=>1);
		$this->loadDataSets();
		$this->object = new Applicant_Library_WorkflowHelper;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
		$this->db->query("DELETE FROM applicantTransactions");
	}

	/**
	 * @todo Implement testGetSessionNameSpace().
	 */
	public function testGetSessionNameSpace()
	{
		
		$this->assertEquals('applicantApply',$this->object->getSessionNameSpace(),'Session namespace mismatch');
	}

	public function testSetSessionNameSpace()
	{
		
		$this->object->setSessionNameSpace('foo');
		$this->assertEquals('foo', $this->object->getSessionNameSpace(),'Setter mismatch');
	}

	public function testInitSession()
	{
		
		$this->object->initSession();
		$this->assertNotNull($this->object->getSessionSteps(),'Session is not set');
		$this->assertEquals(true,$this->object->getSessionSteps()->initialized,'Session is not initialized');
		$this->object->terminateSession();
	}

	public function testGetSteps()
	{
		
		$this->object->initSession();
		$this->assertNotNull($this->object->getSessionSteps(),'Session is not set');
		$this->assertEquals(true,$this->object->getSessionSteps()->initialized,'Session is not initialized');
		$this->object->terminateSession();
	}

	public function testGetStepsReturnNullIfNotInitialized()
	{
		
		$this->assertNull($this->object->getSessionSteps(),'Should be null');
	}

	public function testRouteAuthenticateUser()
	{
		
		$args = array('module'=>'applicant','controller'=>'apply','action'=>'index','haveaccount'=>1);
		$result = $this->object->routeAuthenticateUser($args);
		$this->assertEquals('applicant/apply/applyuser',$result,'Response mismatch.We should receive apply');
		$args = array('module'=>'applicant','controller'=>'apply','action'=>'index','haveaccount'=>0);
		$result = $this->object->routeAuthenticateUser($args);
		$this->assertEquals('user/join/index',$result,'Response mismatch.We should receive apply');
	}

	public function testUpdateStep()
	{
		
		$args = array('name'=>'one','complete'=>true,'current'=>0,'applicantId'=>1,'payload'=>array('haveAccount'=>1));
		$this->object->initSession();
		$this->object->setSessionSteps('steps', $this->object->getSteps());
		$result = $this->object->updateStep($args);
		$this->assertTrue($result!=false,'Failed while trying to set up the transaction');
	}

	public function testUpdateStepThrowsExceptionDueToFakeApplicantId()
	{
		
		$this->object->initSession();
		$this->object->setSessionSteps('steps', $this->object->getSteps());
		$args = array('name'=>'one','complete'=>true,'current'=>0,'applicantId'=>1,'payload'=>array('haveAccount'=>1));
		$result = $this->object->updateStep($args);
		$this->assertTrue($result!=false,'Failed while trying to set up the transaction');
	}

	/**
	 * @expectedException Applicant_Library_Exception
	 */
	public function testUpdateStepThrowsExceptionMissingArgs()
	{
		
		$this->object->initSession();
		$this->object->setSessionSteps('steps', $this->object->getSteps());
		$this->object->updateStep();
	}

	/**
	 * @expectedException Applicant_Library_Exception
	 */
	public function testUpdateStepThrowsExceptionDueToWrongName()
	{
		
		$this->object->initSession();
		$this->object->setSessionSteps('steps', $this->object->getSteps());
		$args = array('name'=>'fakename');
		$this->object->updateStep($args);
	}

	public function testFetchNextStep()
	{
		
		$this->object->initSession();
		$this->object->setSessionSteps('steps', $this->object->getSteps());
		$this->assertNotNull($this->object->getSessionSteps(),'Session is not set');
		$this->assertEquals(true,$this->object->getSessionSteps()->initialized,'Session is not initialized');
		$args = array('name'=>'one','complete'=>true,'current'=>0,'applicantId'=>1,'payload'=>array('haveAccount'=>1));
		$result = $this->object->updateStep($args);
		$this->assertEquals('applicant/apply/aboutyou',$this->object->fetchNextStep('one'),'The next step should be about you');
		$this->object->terminateSession();
	}

	public function testGetApplicantId()
	{
		
		$this->object->initSession();
		$this->assertNotNull($this->object->getSessionSteps(),'Session is not set');
		$this->assertEquals(true,$this->object->getSessionSteps()->initialized,'Session is not initialized');
		$this->object->setSessionSteps('applicantId', 1);
		$this->assertEquals(1,$this->object->getApplicantId(),"The applicant id doesn't exists");
		$this->object->terminateSession();
	}

	public function testTerminateSession()
	{
		
		$this->object->initSession();
		$this->object->terminateSession();
		$this->assertEquals(false,$this->object->isActive($this->object->getSessionNameSpace()),'The response to isActive should be false');
	}
}
?>