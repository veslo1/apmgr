<?php
/**
 * Test class for Applicant_Library_Reports_Applicant.
 * Generated by PHPUnit on 2010-11-27 at 00:38:13.
 */
class Applicant_Library_Reports_ApplicantTest extends ControllerTestCase
{

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('applicantReport'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testRunReportNoCacheObtainsResults()
	{
		
		$report = new Applicant_Library_Reports_Applicant();
		$result = $report->runReport();
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
	}

	public function testRunReportNoCacheSortReturnsResult()
	{
		
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'applicantName');
		$report = new Applicant_Library_Reports_Applicant($args);
		$result = $report->runReport();
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue( preg_match("/ORDER BY `applicantName` ASC/", $report->getQuery()->__toString()) !=false );
	}

	public function testRunReportNoCacheSortBlocksSort()
	{
		
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'applicantName;`OR 1=1');
		$report = new Applicant_Library_Reports_Applicant($args);
		$result = $report->runReport();
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue( preg_match("/ORDER BY `applicantName` ASC/", $report->getQuery()->__toString()) ==false );
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'applicantName;`AND 1=1`');
		$report = new Applicant_Library_Reports_Applicant($args);
		$result = $report->runReport(false);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue( preg_match("/ORDER BY `applicantName` ASC/", $report->getQuery()->__toString()) ==false );
	}

	public function testCacheData()
	{
		
		$report = new Applicant_Library_Reports_Applicant();
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
	}

	public function testPrepareCacheSeed()
	{
		
		$report = new Applicant_Library_Reports_Applicant();
		$report->init();
		$this->assertEquals('appReport',$report->getSeed());
	}

	public function testPrepareCacheSeedWithPagination()
	{
		
		$report = new Applicant_Library_Reports_Applicant(array(Applicant_Library_Reports_Applicant::PAGINATING=>2));
		$report->init();
		$this->assertEquals('appReportpage2',$report->getSeed(),"Cache identifier failed to prepare the seed");
	}

	public function testPrepareCacheSeedWithPaginationAndSorting()
	{
		
		$report = new Applicant_Library_Reports_Applicant(
		array(
		Applicant_Library_Reports_Applicant::PAGINATING=>2,
		ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'applicantName'
		)
		);
		$report->init();
		$this->assertEquals('appReportpage2applicantNameASC',$report->getSeed(),"We obtained ".$report->getSeed());
	}

	public function testSignalCycleSimpleCase()
	{
		
		//	Basic cycle
		$report = new Applicant_Library_Reports_Applicant(array('signaled'=>false,'dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28'));
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned false');

		//	Signal in action will break the cache that we generated before
		$report = new Applicant_Library_Reports_Applicant(array('signaled'=>true,'dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28'));
		$report->init();
		$result = $report->runReport(true);
		$error = "Failed to obtain a result".$report->getQuery()->__toString();
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue($report->getSignaled(),'Should have returned true');

		//	Now we won't signal and should return false, because the search parameters did not change
		$report = new Applicant_Library_Reports_Applicant(array('signaled'=>false,'dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28'));
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned true');
	}

	public function testSignalWithPage()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>5,'signaled'=>true,'dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue($report->getSignaled(),'Should have returned false');
	}

	public function testSignalWithFakePage()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>'x5','signaled'=>true,'dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue($report->getSignaled(),'Should have returned false');
	}

	public function testSignalWithPageAndSorting()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>5,'signaled'=>true,ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW, ZFInterfaces_Sortable::COLUMN=>'applicantName','dateFrom'=>'2010-03-01','dateTo'=>'2010-03-28');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertTrue($report->getSignaled(),'Should have returned false');
	}

	public function testSignalSetMatchesTrue()
	{
		
		$report = new Applicant_Library_Reports_Applicant(array('signaled'=>true));
		$this->assertTrue($report->getSignaled(),'Signaled should return true');
	}

	public function testSignalSetMatchesFalse()
	{
		
		$report = new Applicant_Library_Reports_Applicant(array('signaled'=>false));
		$this->assertFalse($report->getSignaled(),'Signaled should return false');
	}

	public function testNoSignalWithPage()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>5,'signaled'=>false);
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned false');
	}

	public function testNoSignalWithFakePage()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>'x5','signaled'=>false);
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned false');
	}

	public function testNoSignalWithPageAndSorting()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>5,'signaled'=>false,ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW, ZFInterfaces_Sortable::COLUMN=>'applicantName');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned false');
	}

	public function testNoSignalWithPageAndSortingFakeCol()
	{
		
		//	Basic cycle
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>5,'signaled'=>false,ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW, ZFInterfaces_Sortable::COLUMN=>'fake');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(true);
		$this->assertTrue(is_array($result) or is_null($result),'We should have returned an array');
		$this->assertFalse($report->getSignaled(),'Should have returned false');
	}

	public function testDateFilteringPass()
	{
		
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>1,'signaled'=>false,'dateFrom'=>'2010-05-01','dateTo'=>'2010-05-28');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(false);
		$total = count($result);
		$this->assertTrue($total==1,'We obtained '.$total);
		$pattern = "/AA.dateCreated BETWEEN '2010-05-01' AND '2010-05-28'/";
		$query = $report->getQuery();
		$this->assertTrue( preg_match($pattern,$query)==1,'The date applied wasn not found.\nWe retrieved '.$query );
	}

	public function testDateFilteringSkipsWrongDate()
	{
		
		$args = array(Applicant_Library_Reports_Applicant::PAGINATING=>1,'signaled'=>false,'dateFrom'=>'2010foo01','dateTo'=>'2010-05-28');
		$report = new Applicant_Library_Reports_Applicant($args);
		$report->init();
		$result = $report->runReport(false);
		$pattern = "/AA.dateCreated BETWEEN '2010-05-01' AND '2010-05-28'/";
		$query = $report->getQuery();
		$this->assertTrue( preg_match($pattern,$query)==0,'The date applied wasn not found.\nWe retrieved '.$query );
	}
}
?>