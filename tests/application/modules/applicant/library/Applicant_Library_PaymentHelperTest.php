<?php
/**
 * Test class for Applicant_Library_PaymentHelper.
 * Generated by PHPUnit on 2010-08-13 at 23:04:11.
 */
class Applicant_Library_PaymentHelperTest extends ControllerTestCase
{
	/**
	 * @var Applicant_Library_PaymentHelper
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1,'accountsAndLinks'=>1,'depositsAndFees'=>1,'bills'=>1, 'ApplicantPayment'=>1,'setting'=>1);
		$this->loadDataSets();
		$this->object = new Applicant_Library_PaymentHelper;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
		unset($this->object);
	}

	public function testCreateBill()
	{
		
		#	We need to inject this information from outside
		$fee = new Financial_Model_Fee();
		$fees[] = $fee->findById(1);
		$fees[] = $fee->findById(2);
		$args = array('applicantId'=>1,'fees'=>$fees);
		$this->login('jvazquez','Test1234');
		$result = $this->object->initBilling($args);
		$this->assertTrue(is_array($result),'Is not an array');
		$this->assertTrue(count($result)>0,'The count is not greater than 0');
		$this->assertTrue($this->object->getTotalAmount()>50);
		$this->assertEquals(2, count($this->object->getApplicantFeeBillStack()) );
		$this->assertEquals(2,count($this->object->getPayLoadBills()));
		$payloadBills = $this->object->getPayLoadBills();
		$this->assertType('Financial_Model_Fee', $payloadBills[0]['fee'],'We obtained a different object');
		$this->assertType('int',$payloadBills[0]['binding']['feeId'],'We obtained something different when checking for int at the payload for feeId');
		$this->assertType('int',$payloadBills[0]['binding']['billId'],'We obtained something different when checking for int at the payload for billId');
	}

	/**
	 * @expectedException Exception
	 */
	public function testCreateBillThrowsExceptionMissingFees()
	{
		
		$this->object->createBill();
	}

	/**
	 * @expectedException Exception
	 */
	public function testCreateBillThrowsExceptionMissingApplicantId()
	{
		
		#	We need to inject this information from outside
		$fee = new Financial_Model_Fee();
		$fees[] = $fee->findById(1);
		$fees[] = $fee->findById(2);
		$args = array('fees'=>$fees);
		$this->login('jvazquez','Test1234');
		$result = $this->object->initBilling($args);
	}

	public function testCreateApplicantFeeBill()
	{
		
		$args = array('applicantId'=>1,'feeId'=>1,'billId'=>1,'amount'=>20.40);
		$result = $this->object->createApplicantFeeBill($args);
		$this->assertTrue($result!=false);
	}

	/**
	 *
	 * @expectedException Zend_Db_Statement_Exception
	 */
	public function testCreateApplicantFeeBillThrowsException()
	{
		
		$result = $this->object->createApplicantFeeBill(null);
	}

	public function testCreatePayment()
	{
		
		$fee = new Financial_Model_Fee();
		$fees[] = $fee->findById(1);
		$fees[] = $fee->findById(2);
		$args = array('applicantId'=>1,'fees'=>$fees);
		$this->login('jvazquez','Test1234');
		$result = $this->object->initBilling($args);
		$paymentArgs = $this->object->getPayLoadBills();
		$paymentArgs['payorName'] = 'John Test';
		$result = $this->object->createPayment($paymentArgs);
		$this->assertTrue($result!=false);
	}

	public function testCreatePaymentReturnsFalse()
	{
		
		$result = $this->object->createPayment(null);
		$this->assertFalse($result);
	}

	public function testValidateFeeIntegrity()
	{
		
		$amount = 80;
		$result = $this->object->validateFeeIntegrity($amount);
		$this->assertTrue(is_array($result) and count($result)>0,"Returning array wasn't valid");
	}

	public function testAccumulateSum()
	{
		
		$amount = 80;
		$result = $this->object->validateFeeIntegrity($amount);
		$buffered = $this->object->accumulateFeeSum($result);
		$this->assertEquals($amount,$buffered);
	}

	public function testAccumulateSumWithZeroReturnsZero()
	{
		
		$buffered = $this->object->accumulateFeeSum();
		$this->assertEquals(0,$buffered);
	}

	public function testGetFees()
	{
		
		$result = $this->object->getFees();
		$this->assertType('array', $result);
		$this->assertGreaterThanOrEqual(0, count($result),'We should have at least 1 element');
		$this->assertTrue( empty($result)==false );
	}

	public function testPaidFees()
	{
		
		$result = $this->object->getPaidFees(12);		 
		$this->assertType('array', $result,'We did not retrieve an array as a result');
		$this->assertGreaterThanOrEqual(0, count($result),'We should have at least 1 element');
		$this->assertFalse( empty($result)==true ,'The array is empty');
	}

	public function testIsPaymentEnabled()
	{
		
		$this->db->query("UPDATE `settings` SET value=0 WHERE name='paymentSystem'");
		
		$result = $this->object->isPaymentEnabled();
		$this->db->query("UPDATE `settings` SET value=1 WHERE name='paymentSystem'");
		$this->assertFalse($result,'Payment should be disabled');
	}

	/**
	 *  Missing financial account setting for the cash
	 */
	public function testCreatePaymentMissingAccountId()
	{
		
		#	We need to inject this information from outside
		$this->db->query("DELETE FROM financialAccountSetting WHERE settingName='applicantFeeCashAccount'");

		$fee = new Financial_Model_Fee();
		$fees[] = $fee->findById(1);
		$fees[] = $fee->findById(2);
		$args = array('applicantId'=>1,'fees'=>$fees);
		$this->login('jvazquez','Test1234');
		$result = $this->object->initBilling($args);
		$paymentArgs = $this->object->getPayLoadBills();
		$paymentArgs['payorName'] = 'John Test';
		$result = $this->object->createPayment($paymentArgs);
		$this->assertTrue($result==false);
	}
	
	public function testValidatePayRequest(){
		
		$args = array();
		$this->assertFalse($this->object->validatePayAction($args),'The validatePayRequest should fail');
		$this->assertEquals($this->object->getMessageState(),'applicantIdMissing','The state of the helper should tell us that the applicant id is missing');
	}
	
	/**
	 *  Test the debit account setting
	 */
	public function testGetDebitAccountId()
	{
		$accountId = $this->object->getDebitAccountId();
		$this->assertEquals( 1, $accountId);	
	}
	
	/**
	 *  Test the prelease debit account setting
	 */
	public function testGetPreleaseDebitAccountId()
	{
		$accountId = $this->object->getPreleaseDebitAccountId();
		$this->assertEquals( 1, $accountId);	
	}
	
	/**
	 *  Test getDueFees
	 *  1)  No row in applicantFeeBill
	 *  2)  Needs paymentSytem setting set in Settings
	 */
	public function testGetDueFees()
	{
		$applicantId = 11; 
		$fees = $this->object->getDueFees( $applicantId );		
		$this->assertEquals( 2, count($fees) );	
	}
	
	/**
	 *  Test fetchManualBillsToPay	 
	 */
	/*
	public function testFetchManualBillsToPay()
	{		
		$applicantId = 10; 
		$fees = $this->object->fetchManualBillsToPay( $applicantId );		
		$this->assertEquals( 1, count($fees) );		
	}
	*/
	
	/**
	 *  Test getBillSum	 
	 */
	/*
	public function testGetBillSum()
	{	
		$billArray = array( 0=>20, 1=>1 ); // should sum to 110 = 10 + 100
		$sum = $this->object->getBillSum($billArray);
		$this->assertEquals( 110, $sum );			
	}
	*/
}
?>