<?php
/**
 * Test class for Applicant_Model_BackgroundCheck.
 * Generated by PHPUnit on 2010-10-17 at 13:24:25.
 */
class Applicant_Model_BackgroundCheckTest extends ControllerTestCase
{
	/**
	 * @var Applicant_Model_BackgroundCheck
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1);
		$this->loadDataSets();
		$this->object = new Applicant_Model_BackgroundCheck;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testsetApplicantId()
	{
		$this->object->setApplicantId(1);
		$this->assertEquals(1,$this->object->getApplicantId(),'The setter for applicantId failed');
	}

	public function testgetApplicantId()
	{
		$this->object->setApplicantId(1);
		$this->assertEquals(1,$this->object->getApplicantId(),'The setter for applicantId failed');
	}

	public function testSetStatus()
	{
		$this->object->setStatus(1);
		$this->assertEquals(1,$this->object->getStatus(),'The setter for status failed');
	}

	public function testGetStatus()
	{
		$this->object->setStatus(1);
		$this->assertEquals(1,$this->object->getStatus(),'The setter for status failed');
	}

	public function testSetNotes()
	{
		$this->object->setNotes('This is a test');
		$this->assertEquals('This is a test',$this->object->getNotes(),'The setter for notes failed');
	}

	public function testGetNotes()
	{
		$this->object->setNotes('This is a test');
		$this->assertEquals('This is a test',$this->object->getNotes(),'The setter for notes failed');
	}

	public function testSetUserId(){
		$this->object->setUserId(1);
		$this->assertEquals(1,$this->object->getUserId(),'SEtter for userId failed');
	}

	public function testGetUserId(){
		$this->object->setUserId(1);
		$this->assertEquals(1,$this->object->getUserId(),'SEtter for userId failed');
	}

	public function testSave()
	{
		$this->login('jvazquez','Test1234');
		$args = array('applicantId'=>1,'status'=>'passed','notes'=>'Automated System Response','currentStatus'=>1);
		$bgCheck = new Applicant_Model_BackgroundCheck($args);
		$this->assertEquals(1,$bgCheck->getApplicantId(),'The set operation failed with array arguments');
		$saved = $bgCheck->save();
		$this->assertTrue($saved!=false,'The save operation failed');
	}

	public function testFindById(){
		$args = array('applicantId'=>1,'status'=>'passed','notes'=>'Automated System Response','currentStatus'=>1);
		$bgCheck = new Applicant_Model_BackgroundCheck($args);
		$saved = $bgCheck->save();
		$this->assertTrue($saved!=false,'The save operation failed');
		$bgCheckResult = $bgCheck->findById($saved);
		$this->assertTrue($bgCheckResult!=null,'Operation find by id failed');
		$this->assertEquals($bgCheckResult->getApplicantId(),$bgCheck->getApplicantId(),'The find by id operation failed');
		$this->assertEquals($bgCheckResult->getStatus(),$bgCheck->getStatus(),'The find by id operation failed');
		$this->assertEquals($bgCheckResult->getNotes(),$bgCheck->getNotes(),'The find by id operation failed');
	}

	public function fetchAll(){
		$args = array('applicantId'=>1,'status'=>'passed','notes'=>'Automated System Response','currentStatus'=>1);
		$bgCheck = new Applicant_Model_BackgroundCheck($args);
		$saved = $bgCheck->save();
		$this->assertTrue($saved!=false,'The save operation failed');
		$results = $bgCheck->fetchAll(false,false,true);
		$this->assertEquals(1, count($results));
		$results = $bgCheck->fetchAll('notes','asc',true);
		$this->assertEquals(1, count($results));
	}
}
?>
