<?php

/**
 * Test class for Applicant_Model_Occupant.
 * Generated by PHPUnit on 2010-07-03 at 12:04:28.
 */
class Applicant_Model_OccupantTest extends ControllerTestCase {
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp() {
		parent::setUp();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	public function tearDown()
	{
		parent::tearDown();
	}

	public function testCollectPost()
	{
		$post = array(
    					'module' => 'applicant' ,
    					'controller' => 'apply',
    					'action' => 'occupants',
    					'occupants' => array (
									            'name' => 'Brat',
												'idIdentification'=>1,
									            'identification' => '123456789',
									            'state' => 1,
									            'ssn' => '123456789',
									            'dob' => '1999-09-01',
									            'sex' => 1,
									            'relationship' => 'Son'
									            ),
					    'occupants_1' => array
									            (
								            'name' => 'Grizzly',
									        'idIdentification'=>1,
								            'identification' => '123456720',
								            'state' => 1,
								            'ssn' => '987654321',
								            'dob' => '1999-11-01',
								            'sex' => 1,
								            'relationship' => 'Son'
								            ),
					    'control' => 1,
					    'submit' => 'Save'
					    );
	    $iterator = new Applicant_Library_OcupantFilterIterator(new ArrayIterator($post));
	    foreach($iterator as $key=>$value) {
	    	$occupants = new Applicant_Model_Occupant($value);
	    	$this->assertEquals($post['occupants']['name'],$occupants->getName());
	    	$this->assertEquals($post['occupants']['idIdentification'],$occupants->getIdIdentification());
	    	$this->assertEquals($post['occupants']['relationship'],$occupants->getRelationship());
	    	$this->assertEquals($post['occupants']['sex'],$occupants->getSex());
	    	$this->assertEquals($post['occupants']['dob'],$occupants->getDob());
	    	$this->assertEquals($post['occupants']['identification'],$occupants->getIdentification());
	    	break;
	    }
	}

	public function testSave()
	{
		$this->dSet->setSeed(APPLICATION_FAKESETS.'/users.xml');
        $this->dSet->getSetUpOperation();

		$post = array(
    					'module' => 'applicant' ,
    					'controller' => 'apply',
    					'action' => 'occupants',
    					'occupants' => array (
									            'name' => 'Brat',
									            'idIdentification'=>1,
												'identification' => '123456789',
									            'state' => 1,
									            'ssn' => '123456789',
									            'dob' => '1999-09-01',
									            'sex' => 1,
									            'relationship' => 'Son'
									            ),
					    'control' => 1,
					    'submit' => 'Save'
					    );
	    $saved = false;
	    $iterator = new Applicant_Library_OcupantFilterIterator(new ArrayIterator($post));
	    foreach($iterator as $key=>$value) {
	    	$occupants = new Applicant_Model_Occupant($value);
	    	$occupants->setApplicantId(1);
	    	$saved = $occupants->save();
	    }
	    $this->assertTrue(false!==$saved);
	    $occupants = $occupants->findById($saved);
	    $this->assertEquals('driversLicense',$occupants->getIdIdentification());
	}
}
?>
