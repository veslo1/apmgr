<?php
/**
 * Test class for Applicant_Model_FeeSetting.
 * Generated by PHPUnit on 2010-08-06 at 18:56:29.
 */
class Applicant_Model_FeeSettingTest extends ControllerTestCase {
	/**
	 * @var Applicant_Model_FeeSetting
	 */
	protected $object;

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->object = new Applicant_Model_FeeSetting;
		$this->dataSetStackBuffer = array('accountsAndLinks'=>1,'depositsAndFees'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::tearDown()
	 */
	public function tearDown()
	{
		parent::tearDown();
	}

	public function testSetFeeId()
	{
		
		$this->object->setFeeId(1);
		$this->assertEquals(1,$this->object->getFeeId(),'Failed to retrieve the same FeeId');
	}

	public function testGetFeeId()
	{
		
		$this->object->setFeeId(1);
		$this->assertEquals(1,$this->object->getFeeId(),'Failed to retrieve the same FeeId');
	}

	/**
	 * We fail because that fee id doesn't exists
	 * @expectedException Zend_Db_Statement_Exception
	 */
	public function testSaveFailsIfMissingFeeId()
	{
		
		$this->object->setFeeId(1);
		$this->object->save();
	}

	public function testSaveFeePass() {
		
		$this->object->setFeeId(4);
		$result = $this->object->save();
		$this->assertTrue($result!=false);
	}

	/**
	 * @expectedException Zend_Db_Statement_Exception
	 */
	public function testSaveFeeFailsWhenSendingExistingAppFeeSetting()
	{
		
		$this->object->setFeeId(1);
		$result = $this->object->save();
		$this->assertTrue($result!=false);
		$this->object->setFeeId(1);
		$result = $this->object->save();
		$this->assertFalse($result);
	}

	public function testProcessReturnsTrueIfNoArgs()
	{
		
		$result = $this->object->process();
		$this->assertTrue($result!=false);
	}

	public function testProcessReceivesArgsPasses()
	{
		
		$result = $this->object->process(array(0=>4));
		$this->assertTrue($result!=false);
	}

	public function testRetrieveEnabledFees()
	{
		
		$result = $this->object->process(array(0=>4));
		$this->assertTrue($result!=false);
		$result = $this->object->retrieveEnabledFees();
		$this->assertTrue(is_array($result),'We did not retrieve an array');
		$this->assertTrue(count($result)>0,'The count of results is not greater than 0');
	}
}
?>