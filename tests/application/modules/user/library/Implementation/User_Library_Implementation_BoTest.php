<?php
/**
 * Test class for User_Library_Implementation_Bo.
 * Generated by PHPUnit on 2010-12-27 at 23:25:15.
 * @author Jorge Omar Vazquez <jvazquez@debserverp4.com.ar>
 * @package tests.application.modules.user.library.implementation
 */
class User_Library_Implementation_BoTest extends ControllerTestCase
{

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testSave()
	{
		$args = array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8);
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$result = $bo->save($args);
		$this->assertTrue($result!=false,'Save operation should not be false');
	}

	public function testUpdateFails()
	{
		$args = array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8);
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$result = $bo->update($args);
		$this->assertFalse($result);
	}

	public function testUpdatePass()
	{
		$args = array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8);
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$id = $bo->save($args);
		$this->assertTrue($id!=false,'Save operation failed');
		$args['id'] = $id;
		$updated = $bo->update($args);
		$this->assertTrue($updated!=false,'Update operation failed');
	}

	public function testDelete()
	{
		$args = array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8);
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$id = $bo->save($args);
		$this->assertTrue($id!=false,'Save operation failed');
		$args['id'] = $id;
		$args['confirm'] = 1;
		$deleted = $bo->delete($args);
		$this->assertTrue($deleted!=false,'Delete operation failed.'.$bo->getMessageState());
	}

	public function testGetCreateUserForm()
	{
		$bo = new User_Library_Implementation_Bo();
		$form = $bo->getCreateUserForm();
		$this->assertNotNull($form,'The user form that was retrieved is null');
	}

	public function testViewAllUserInformation()
	{
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$result = $bo->viewAllUserInformation();
		$this->assertTrue(is_array($result),'We are expecting an array result');
	}

	public function testViewAllUserInformationWithSort()
	{
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$opts = array(ZFInterfaces_Sortable::COLUMN=>'firstName',ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW);
		$result = $bo->viewAllUserInformation($opts);
		$this->assertTrue(is_array($result),'We are expecting an array result');
	}

	public function testIsValid()
	{
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$args['id'] = 1;
		$valid = $bo->isValid($args);
		$this->assertTrue($valid!=false,'We expected a valid result');
	}

	public function testIsValidSkipsEmptyArgs()
	{
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$args['foo'] = 1;
		$valid = $bo->isValid($args);
		$this->assertFalse($valid,'We expected a false valid result');
		$this->assertEquals('userIdMissing',$bo->getMessageState());
	}

	public function testIsValidSkipsInvalidId()
	{
		$bo = new User_Library_Implementation_Bo();
		$bo->setDao(new User_Library_Implementation_Dao());
		$args['id'] = 99;
		$valid = $bo->isValid($args);
		$this->assertFalse($valid,'We expected a false valid result');
		$this->assertEquals($bo->getMessageState(),'unknownuser');
	}

	public function testRecoverUserName()
	{
		$args = array('username'=>'jvazquez','email'=>'jorgeomar.vazquez@gmail.com');
		$transport = new Email_File(APPLICATION_TEST.DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'fakemails'.DIRECTORY_SEPARATOR.'email.eml');
		Zend_Mail::setDefaultTransport($transport);
		$bo = new User_Library_Implementation_Bo();
		$bo->setEmailAgent($transport);
		$recovered = $bo->recoverUserName(null);
		$this->assertFalse($recovered,'Recovered should return false when we receive a null value');
		
		$dao = $this->getMock('User_Library_Implementation_Dao', array('findByKey'), array('search'=>array('emaillAddress'=>'jorgeomar.vazquez@gmail.com')),'dao',true);
		$dao->expects($this->once())->method('findByKey')->will($this->returnValue(array(new User_Model_User($args))));
		$bo->setDao($dao);
		$recovered = $bo->recoverUserName('jorgeomar.vazquez@gmail.com');
		$this->assertTrue($recovered,'Recovered should return true when we have a match');
		
	}

	public function testForgeMail()
	{
		$transport = new Email_File(APPLICATION_TEST.DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'fakemails'.DIRECTORY_SEPARATOR.'email.eml');
		Zend_Mail::setDefaultTransport($transport);
		$args = array('username'=>'jvazquez','emailAddress'=>'jorgeomar.vazquez@gmail.com','firstName'=>'Jorge','lastName'=>'Vazquez');
		$bo = new User_Library_Implementation_Bo();
		$this->assertType('Zend_Mail',$bo->forgeMail(new User_Model_User($args)) );
	}
	
	/**
	 *
	 * @return Zend_Mail_Message_File
	 */
	public function getMailboxEmail()
	{
		$mails = new Zend_Mail_Storage_Mbox(array('filename' =>APPLICATION_TEST.DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'fakemails'.DIRECTORY_SEPARATOR.'email.eml'));
		$email = $mails->getMessage(1);
		return $email;
	}
}
?>