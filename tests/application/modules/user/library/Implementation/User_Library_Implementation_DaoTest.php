<?php
/**
 * Test class for User_Library_Implementation_Dao.
 * Generated by PHPUnit on 2010-12-26 at 13:20:03.
 */
class User_Library_Implementation_DaoTest extends ControllerTestCase
{
	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('users'=>1);
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}
	
	public function testSave()
	{
		$dao = new User_Library_Implementation_Dao();
		$result = $dao->save(new User_Model_User(array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8)));
		$this->assertTrue($result!=false,'Save operation failed');
	}

	public function testGetPersistanceEngine()
	{
		$dao = new User_Library_Implementation_Dao();
		$result = $dao->getPersistanceEngine();
		$this->assertNotNull($result,'We should be expecting a Zend_Db_Adapter_Pdo_Mysql');
	}

	public function testFindById()
	{
		$dao = new User_Library_Implementation_Dao();
		$user = $dao->findById(1);
		$this->assertNotNull($user,'Result should not be null');
		$this->assertNotNull($user->getFirstName(),'First name should not be null');
	}

	public function testFindByKey()
	{
		$stubDao = new User_Library_Implementation_Dao();
		$result = $stubDao->save(new User_Model_User(array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8)));
		$this->assertTrue($result!=false,'Save operation failed');
		$dao = new User_Library_Implementation_Dao();
		$param = array('search'=>array('username'=>'Testbin'));
		$result = $dao->findByKey($param);
		$this->assertNotNull($result,'Result should not be null');
		$user = array_shift($result);
		$this->assertEquals('Testing',$user->getFirstName(),'First name should match');
	}

	public function testUpdate()
	{
		$stubDao = new User_Library_Implementation_Dao();
		$result = $stubDao->save(new User_Model_User(array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8)));
		$this->assertTrue($result!=false,'Save operation failed');
		$param = array('search'=>array('username'=>'Testbin'));
		$result = $stubDao->findByKey($param);
		$this->assertNotNull($result,'Result should not be null');
		$user = array_shift($result);
		$user->setRoleId(7);
		$updated = $stubDao->update($user);
		$this->assertTrue($updated!=false,'Returned false');
		$param = array('search'=>array('username'=>'Testbin'));
		$result = $stubDao->findByKey($param);
		$this->assertNotNull($result,'Result should not be null');
		$user = array_shift($result);
		$this->assertEquals(7,$user->getRoleId(),'User roles must match');
	}

	public function testDisable()
	{
		$stubDao = new User_Library_Implementation_Dao();
		$result = $stubDao->save(new User_Model_User(array('username'=>'Testbin','emailAddress'=>'test@test.com','password'=>sha1('Test1234'),'firstName'=>'Testing','lastName'=>'Users','roleId'=>8)));
		$this->assertTrue($result!=false,'Save operation failed');
		$param = array('search'=>array('username'=>'Testbin'));
		$result = $stubDao->findByKey($param);
		$this->assertNotNull($result,'Result should not be null');
		$user = array_shift($result);
		$deleted = $stubDao->disable($user->getId(),1);
		$this->assertEquals($deleted=!false,'Delete operation failed');
	}
	
	public function testFetchAll()
	{
		$user = new User_Library_Implementation_Dao();
		$result = $user->fetchAll();
		$this->assertTrue($result!=null,'Result is null');
		$this->assertGreaterThanOrEqual(1, count($result)) ;
	}
	
	public function testSaveCollection()
	{
		$dao = new User_Library_Implementation_Dao();
		$args = array( 
						new User_Model_User(array('username'=>'jsmith','password'=>sha1('Test1234'),'firstName'=>'Jorge','lastName'=>'Vazquez','emailAddress'=>'jorgeomar.vazquez@gmail.com','roleId'=>3)),
						new User_Model_Recover( array('hashToken'=>sha1('sammich'),'receiver'=>'jorgeomar.vazquez@gmail.com','expiricyDate'=>date('Y-m-d')) ) 
					);
		$result = $dao->saveCollection($args);
		$this->assertTrue($result!=false, 'We expected a true result');
	}
}
?>