<?php
/**
 * Test class for Financial_Form_Refund.
 * Generated by PHPUnit on 2010-09-11 at 18:32:57.
 */
class Financial_Form_RefundTest extends ControllerTestCase
{
    /**
     * @var Financial_Form_Refund
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
    	parent::setUp();
        $this->object = new Financial_Form_Refund;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
    }
    
    public function testSetFormHasComment()
    {
    	$this->object->setForm();
    	$comment = $this->object->getElement('comment');
    	$this->assertNotNull($comment,'The comment area is not present');
    }
    
    public function testSetFormHasMaxRefundInput()
    {
    	$this->object->setForm();
    	$maxrefund = $this->object->getElement('amount');
    	$this->assertNotNull($maxrefund,'The max refund input was null');
    }
    
    public function testAmountNullFails() 
    {
    	$this->object->setForm();
    	$this->assertFalse($this->object->isValid(array('amount'=>NULL)),'Form should fail against null value');
    }
    
    public function testAmountNotFloatFails()
    {
    	$this->object->setForm();
    	$this->assertFalse($this->object->isValid(array('amount'=>'trece')),'Form should fail against a string');
    }
    
    public function testAmountPassesInt()
    {
    	$this->object->setForm();	
    	$this->assertTrue($this->object->isValidPartial(array('amount'=>'13')),'Should pass an int');
    	$fValue = $this->object->getElement('amount')->getValue();
    	$this->assertEquals('13',$fValue,"We obtained {$fValue}");
    }
    
	public function testAmountPassesFloat()
	{
    	$this->object->setForm();
    	$this->object->getElement('amount')->setValue(13.40);
    	$this->assertTrue($this->object->isValidPartial(array('amount'=>'13.40')),'Form should pass a float');
    	$fValue = $this->object->getElement('amount')->getValue();
    	$this->assertEquals('13.40',$fValue,"We obatained {$fValue}");
    }
}
?>
