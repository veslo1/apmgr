<?php
/**
 * Test class for Financial_Library_LateDueRent.
 * Generated by PHPUnit on 2010-10-29 at 23:31:16.
 */

// phpunit --no-configuration --bootstrap application/bootstrap.php application/modules/financial/library/reports/Financial_Reports_LateDueRentTest.php
class Financial_Library_Reports_LateDueRentTest extends ControllerTestCase {

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::setUp()
	 */
	public function setUp()
	{
		parent::setUp();
		$this->dataSetStackBuffer = array('lateDueRentReport'=>1);
		$this->login('jvazquez','Test1234');
		$this->loadDataSets();
	}

	/* (non-PHPdoc)
	 * @see Framework/PHPUnit_Framework_TestCase::tearDown()
	 */
	public function tearDown()
	{
		$this->unLoadDataSets();
		parent::tearDown();
	}

	public function testInitDb()
	{
		$object = new Financial_Library_Reports_LateDueRent;
		$object->setGatewayLink(Financial_Library_Reports_RentRoll::DB);
		$db = $object->getGatewayLink();
		$this->assertType('Zend_Db_Adapter_Pdo_Mysql', $db);
	}

	public function testConfigureCache()
	{
		$object = new Financial_Library_Reports_LateDueRent();
		$object->init();
		$this->assertType('Zend_Cache_Manager',$object->getCacheManager());
	}

	public function testRunReportNoCache()
	{
		$object = new Financial_Library_Reports_LateDueRent;
		$result = $object->runReport(false);
		//		print $object->getQuery()->__toString();
		$this->assertTrue(count($result)>0,'The query failed to obtain results');
		$this->assertEquals("SELECT `B`.`originalAmountDue` AS `rentAmountDue`, DATE_FORMAT(B.dueDate,'%m/%d/%Y') AS `rentDueDate`, DATEDIFF(NOW(),B.dueDate) AS `numDaysLate`, `U`.`number` AS `unitNumber`, CONCAT_WS(' ',US.firstName, US.lastName) AS `tenantName` FROM `lease` AS `L`
 INNER JOIN `leaseSchedule` AS `LS` ON LS.leaseId=L.id
 INNER JOIN `bill` AS `B` ON LS.billId=B.id
 INNER JOIN `unit` AS `U` ON L.unitId = U.id
 INNER JOIN `tenant` AS `T` ON L.id=T.leaseId
 INNER JOIN `user` AS `US` ON T.userId=US.id WHERE (B.dueDate<NOW() AND B.isPaid=0)",$object->getQuery()->__toString());		
	}

	public function testRunReportWithCache()
	{
		$object = new Financial_Library_Reports_LateDueRent();
		$object->init();
		$result = $object->runReport(true);
		$this->assertTrue(count($result)>0,'The query failed to obtain results');
		//	Since we did not seed the object, the tags will match
		$this->assertEquals(Financial_Library_Reports_LateDueRent::DEFAULTSEED,$object->getSeed());
	}

	public function testQueryWithSort()
	{
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'tenantName');
		$object = new Financial_Library_Reports_LateDueRent($args);
		$result = $object->runReport(false);
		$this->assertTrue(preg_match('/ORDER BY `tenantName` ASC/',$object->getQuery()->__toString())==1,$object->getQuery()->__toString());
	}

	public function testHandleQueryParamsMultiple()
	{
		$args = array(ZFInterfaces_Sortable::MODE=>ZFInterfaces_Sortable::ASCVIEW,
		ZFInterfaces_Sortable::COLUMN=>'tenantName','page'=>2,
        			'cacheIdentifier'=>Financial_Library_Reports_LateDueRent::CACHEIDENTIFIER);
		$object = new Financial_Library_Reports_LateDueRent($args);
		$object->init();
		$this->assertEquals('lateDueRentReportpage2tenantNameASC',$object->getSeed());
	}

	public function testHandleQueryParamsPagination()
	{
		$args = array('page'=>2);
		$object = new Financial_Library_Reports_LateDueRent($args);
		$object->init();
		$this->assertEquals('lateDueRentReportpage2',$object->getSeed());
	}

	public function testHandleQueryParamsBadPagination()
	{
		$args = array('fakee'=>2);
		$object = new Financial_Library_Reports_LateDueRent($args);
		$object->init();
		$this->assertEquals('lateDueRentReport',$object->getSeed());
		unset($object);
		$args = array('page'=>"x3");
		$object = new Financial_Library_Reports_LateDueRent($args);
		$object->init();
		$this->assertEquals('lateDueRentReport',$object->getSeed());
	}
}
?>
