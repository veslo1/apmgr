<?php
/**
 * Test class for Applicant_Library_FormControl.
 * Generated by PHPUnit on 2010-06-29 at 23:17:06.
 */
class ZFForm_FormControlTest extends ControllerTestCase
{
	/**
	 * (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::setUp()
	 */
	public function setUp() {
		parent::setUp();
	}
	
	/**
	 * (non-PHPdoc)
	 * @see tests/application/ControllerTestCase::tearDown()
	 */
	public function tearDown() {
		parent::tearDown();
	}

	/**
	 * @expectedException Applicant_Library_Exception
	 */
	public function testRepopulateForm() {
		$control = new ZFForm_FormControl();
		$result = $control->repopulateForm();
	}

	public function testRepopulateSpawnsForm() {
		$args = array('name'=>'Applicant_Form_Occupants','formName'=>'occupants','childForm'=>'Applicant_Form_SubOccupants');
		$mockPost = array('add'=>1,'control'=>0,'occupants'=>array('name'=>'test','relationship'=>'son'));
		$control = new ZFForm_FormControl();
		$form = $control->repopulateForm($args,$mockPost);
		$this->assertInstanceOf('Applicant_Form_Occupants',$form,'We did not have the same ammount of child elements');
		$this->assertNotNull($form->getElement('name'),"Full name is not set");
		$this->assertGreaterThan(0,$form->getSubForms(),"We don't have more than one subform");
		$this->assertNotNull($form->getSubForm('occupants_1'),"The occupants_1 field is not set");
		$this->assertArrayHasKey('name',$form->getSubForm('occupants_1')->getElements(),'Failed getting the key');
	}

	public function testRepopulateSpawnsFormWithContent(){
		$args = array('name'=>'Applicant_Form_Occupants','formName'=>'occupants','childForm'=>'Applicant_Form_SubOccupants');
		$mockPost = array('add'=>1,'control'=>0,'occupants'=>array('name'=>'test','relationship'=>'son'),
			'occupants_1'=>array('name'=>'test2','relationship'=>'cat')
		);
		$control = new ZFForm_FormControl();
		$form = $control->repopulateForm($args,$mockPost);
		$this->assertInstanceOf('Applicant_Form_Occupants',$form,'We did not have the same ammount of child elements');
		$this->assertNotNull($form->getElement('name'),"Full name is not set");
		$this->assertGreaterThan(0,$form->getSubForms(),"We don't have more than one subform");
		$this->assertNotNull($form->getSubForm('occupants_1'),"The occupants_1 field is not set");
		$this->assertArrayHasKey('name',$form->getSubForm('occupants_1')->getElements(),'Failed getting the key');
		$this->assertNotNull($form->getSubForm('occupants_1')->getElement('name'),'We could not retrieve the element name in the sub form 1');
		$this->assertEquals($mockPost['occupants_1']['name'],$form->getSubForm('occupants_1')->getElement('name')->getValue(),'The values do not match');
	}

	public function testValidateForm() {
		$args = array('name'=>'Applicant_Form_Occupants','formName'=>'occupants','childForm'=>'Applicant_Form_SubOccupants');
		$mockPost = array('add'=>'Add','control'=>0);
		$control = new ZFForm_FormControl();
		$form = $control->repopulateForm($args,$mockPost);
		$this->assertGreaterThan(1,$form->getSubForms(),"We don't have more than one subform");
		$result = $control->validateForm($form,$mockPost);
		$this->assertFalse($result,'Subform should validate');
	}
	
	public function testSetSeed()
	{
		$seed = 10;
		$control = new ZFForm_FormControl();
		$control->setSeed($seed);
		$this->assertEquals($seed,$control->getSeed());
	}

	public function testInvalidSeedSetsZeroSeed()
	{
		$control = new ZFForm_FormControl();
		$control->setSeed("abc");
		$this->assertEquals(ZFForm_FormControl::DEFAULT_SEED_VALUE,$control->getSeed());
	}
	
	public function testValidatePopulatedForm(){
		$args = array('name'=>'Applicant_Form_Occupants','formName'=>'occupants','childForm'=>'Applicant_Form_SubOccupants');
		$mockPost = array(
					'module' => 'applicant',
					'controller' => 'apply',
					'action' => 'occupants',
					'occupants' => array ( 'name' =>'Sarah Connor','identification' => '987654321','state' => 43,'ssn' => '987654321','dob' => '1960-02-01','sex' => 2, 'relationship' => 'Mother'),
					'occupants_1' => array ( 'name' =>'T100','identification' => '987654322', 'state' => 43, 'ssn' => '987654322', 'dob' => '1950-09-01', 'sex' => 1, 'relationship' => 'cyborg'),
					'control' => 1,
					'submit' => 'Save'
		);
		$control = new ZFForm_FormControl();
		$form = $control->repopulateForm($args,$mockPost);
		$result = $control->validateForm($form,$mockPost);
		$this->assertTrue($result,'Subform should validate');
	}
}
?>
