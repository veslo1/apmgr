<?php
/**
 * Test class for ZFModel_ParentModel.
 * Generated by PHPUnit on 2010-09-08 at 09:28:03.
 */
class ZFModel_ParentModelTest extends ControllerTestCase
{
    /**
     * @var ZFModel_ParentModel
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
    	parent::setUp();
        $this->object = new ZFModel_ParentModel;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
    }

    public function testGetDbAdapter()
    {
    	$this->object->setDbAdapter('User_Model_DbTable_User');
    	$this->assertEquals('User_Model_DbTable_User', $this->object->getDbAdapter());
    }

    public function testSetDbAdapter()
    {
        $this->object->setDbAdapter('User_Model_DbTable_User');
    	$this->assertEquals('User_Model_DbTable_User', $this->object->getDbAdapter());
    }

    public function testGetDbTable()
    {
    	$this->object->setDbTable('User_Model_DbTable_User');
    	$adapter = $this->object->getDbTable()->getAdapter();
    	$this->assertType('Zend_Db_Adapter_Pdo_Mysql', $adapter,'Failed retrieving the object');
    }

    public function testSetDbTable()
    {
    	$this->object->setDbTable('User_Model_DbTable_User');
    	$adapter = $this->object->getDbTable()->getAdapter();
    	$this->assertType('Zend_Db_Adapter_Pdo_Mysql', $adapter,'Failed retrieving the object');
    }
//    /**
//     * @todo Implement testSetOptions().
//     */
//    public function testSetOptions()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testGetId().
//     */
//    public function testGetId()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSetId().
//     */
//    public function testSetId()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testGetDateCreated().
//     */
//    public function testGetDateCreated()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSetDateCreated().
//     */
//    public function testSetDateCreated()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testGetDateUpdated().
//     */
//    public function testGetDateUpdated()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSetDateUpdated().
//     */
//    public function testSetDateUpdated()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testExists().
//     */
//    public function testExists()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testToArray().
//     */
//    public function testToArray()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testFetchAll().
//     */
//    public function testFetchAll()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testFindById().
//     */
//    public function testFindById()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testFindManyById().
//     */
//    public function testFindManyById()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testFindByKey().
//     */
//    public function testFindByKey()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSave().
//     */
//    public function testSave()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testDelete().
//     */
//    public function testDelete()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSetMessageState().
//     */
//    public function testSetMessageState()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testGetMessageState().
//     */
//    public function testGetMessageState()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testSetProperties().
//     */
//    public function testSetProperties()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testGetProperties().
//     */
//    public function testGetProperties()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
//
//    /**
//     * @todo Implement testIsAdmin().
//     */
//    public function testIsAdmin()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//          'This test has not been implemented yet.'
//        );
//    }
    
    public function testFilterSortZendDbSelectWorks()
    {
    	$message = new Messages_Model_Messages();
    	$result = $message->fetchAll('identifier','asc');
    	$this->assertTrue(count($result)>0,'filter failed');
    }
    
    public function testFilterSortArrayReturnsFalse()
    {
    	$column = 'nill;DROP DBTABLE;';
    	$select = "SELECT F.name,F.amount,AFS.id FROM `applicantFeeSetting` AFS INNER JOIN fee F ON (AFS.feeId=F.id) WHERE F.enabled=1 ORDER BY SHUGU";
    	$result = $this->object->filterSort($column,explode(",","F.name,F.amount,AFS.id"));
    	$this->assertFalse($result);
    }
    
	public function testFilterSortArrayReturnsTrue()
    {
    	$column = 'name';
    	$select = "SELECT F.name AS name,F.amount,AFS.id FROM `applicantFeeSetting` AFS INNER JOIN fee F ON (AFS.feeId=F.id) WHERE F.enabled=1 ORDER BY SHUGU";
    	$result = $this->object->filterSort($column,explode(",","name,F.amount,AFS.id"));//Notice how I put the alias here, is up to you to do it fine
    	$this->assertTrue($result);
    }
    
    public function testFilterSort()
    {
    	$order = "VERTICAL SCALABILITY";
    	$result = $this->object->filterOrder($order);
    	$this->assertFalse($result,'Should have returned false');
    }
}
?>
